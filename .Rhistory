p2
p4
dev.off()
pdf("figures/quality_filtering/core_fugr/locus.NA_DP.pdf", width = 10, height = 6)
p1
p3
dev.off()
pdf("figures/quality_filtering/core_fugr/individual.NA_DP.pdf", width = 16, height = 6)
p2
p4
dev.off()
dp.long = pivot_longer(data.frame(dp), names_to = "sample", values_to = "DP", cols = everything())
head(dp.long)
p5 = ggplot(dp.long, aes(x = DP)) +
geom_histogram(binwidth = 5) +
scale_x_continuous(limits = c(0,100)) + #there are a couple samples with a bit over 100 but not worth worrying about
facet_wrap(~sample, nrow = 7) +
my_gg_theme
pdf("figures/quality_filtering/core_fugr/individual_DP.facets.pdf", width = 60, height = 45)
p5
dev.off()
#########################################
#calculate stats for DP filtering by lib
##sample_ids
first_set.ids = paste0("NG", 1:99)
second_set.ids = paste0("NG", 101:163)
third_set.ids = c(
"NG103",
"NG111",
"NG112",
"NG114",
"NG116",
"NG121",
"NG155",
"NG160",
"NG117",
"NG163"
)
second_set.ids = second_set.ids[!second_set.ids %in% third_set.ids]
fourth_set.ids = paste0("NG", 170:196)
fifth_set.ids = paste0("Neco-", 2:6)
dp.one = dp[,colnames(dp) %in% first_set.ids]
dp.two = dp[,colnames(dp) %in% second_set.ids]
dp.three = dp[,colnames(dp) %in% third_set.ids]
dp.four = dp[,colnames(dp) %in% fourth_set.ids]
dp.five = dp[,colnames(dp) %in% fifth_set.ids]
gt.one = gt[,colnames(gt) %in% first_set.ids]
gt.two = gt[,colnames(gt) %in% second_set.ids]
gt.three = gt[,colnames(gt) %in% third_set.ids]
gt.four = gt[,colnames(gt) %in% fourth_set.ids]
dp.five = dp[,colnames(dp) %in% fifth_set.ids]
dp.one[is.na(gt.one)] = NA
dp.two[is.na(gt.two)] = NA
dp.three[is.na(gt.three)] = NA
dp.four[is.na(gt.four)] = NA
dp.five[is.na(gt.five)] = NA
locus_dp_mean.libOne = rowSums(dp.one, na.rm = T)/ncol(dp.one)
locus_dp_mean.libTwo = rowSums(dp.two, na.rm = T)/ncol(dp.two)
locus_dp_mean.libThree = rowSums(dp.three, na.rm = T)/ncol(dp.three)
locus_dp_mean.libFour = rowSums(dp.four, na.rm = T)/ncol(dp.four)
locus_dp_mean.libFive = rowSums(dp.five, na.rm = T)/ncol(dp.five)
head(locus_dp_mean.libOne)
range(locus_dp_mean.libOne)
range(locus_dp_mean.libTwo)
range(locus_dp_mean.libThree)
range(locus_dp_mean.libFour)
range(locus_dp_mean.libFive)
write.table(first_set.ids, "lib_one_ids.txt")
write.table(first_set.ids, "data/core_fugr/lib_one_ids.txt", quote = F, row.names = F, col.names = F)
write.table(first_set.ids, "data/Fugr1_ref/lib_one_ids.txt", quote = F, row.names = F, col.names = F)
write.table(second_set.ids, "data/Fugr1_ref/lib_two_ids.txt", quote = F, row.names = F, col.names = F)
write.table(third_set.ids, "data/Fugr1_ref/lib_three_ids.txt", quote = F, row.names = F, col.names = F)
write.table(fourth_set.ids, "data/Fugr1_ref/lib_four_ids.txt", quote = F, row.names = F, col.names = F)
write.table(fifth_set.ids, "data/Fugr1_ref/lib_five_ids.txt", quote = F, row.names = F, col.names = F)
mean(locus_dp_mean.libOne)
mean(locus_dp_mean.libTwo)
mean(locus_dp_mean.libThree)
mean(locus_dp_mean.libFour)
mean(locus_dp_mean.libFive)
median(locus_dp_mean.libOne)
median(locus_dp_mean.libTwo)
median(locus_dp_mean.libThree)
median(locus_dp_mean.libFour)
median(locus_dp_mean.libFive)
sd(locus_dp_mean.libOne)
sd(locus_dp_mean.libTwo)
sd(locus_dp_mean.libThree)
sd(locus_dp_mean.libFour)
sd(locus_dp_mean.libFive)
mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))
mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))
mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))
mean(locus_dp_mean.libFour)+(2*sd(locus_dp_mean.libFour))
mean(locus_dp_mean.libFive)+(2*sd(locus_dp_mean.libFive))
mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))
mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))
mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))
mean(locus_dp_mean.libFour)+(2*sd(locus_dp_mean.libFour))
mean(locus_dp_mean.libFive)+(2*sd(locus_dp_mean.libFive))
mean(locus_dp_mean.libOne)-(2*sd(locus_dp_mean.libOne))
mean(locus_dp_mean.libTwo)-(2*sd(locus_dp_mean.libTwo))
mean(locus_dp_mean.libThree)-(2*sd(locus_dp_mean.libThree))
mean(locus_dp_mean.libFour)-(2*sd(locus_dp_mean.libFour))
mean(locus_dp_mean.libFive)-(2*sd(locus_dp_mean.libFive))
locus_dp_mean.libOne
dp.long
ind_stats
locus_dp_mean
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100))
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)")
range(locus_dp_mean.libOne)
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100))
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100))
scale_y_continuous(limits = c(0,200)
)
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,200))
p1 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p1
p1 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))) +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p1
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p2
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) #+
#scale_y_continuous(limits = c(0,150))
p2
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p2
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,100))
p2
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p3
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,1500))
p3
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,250))
p3
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,100))
p2
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,250))
p3
p4 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p4
p1 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p1
p4 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libFour),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libFour)+(2*sd(locus_dp_mean.libFour))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p4
p5 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libFive),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libFive)+(2*sd(locus_dp_mean.libFive))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p5
#the Neco library distribution is disjunct. Filter out samples that are below 5 before calcs
mean(locus_dp_mean.libFive[locus_dp_mean.libFive > 5])
p5 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libFive),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libFive)+(2*sd(locus_dp_mean.libFive))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) #+
#    scale_y_continuous(limits = c(0,150))
p5
mean(locus_dp_mean.libFive)
pdf("figures/quality_filtering/core_fugr/library_DP_dist.pdf", width = 6, height = 6)
p1
p2
p3
p4
p5
dev.off()
52384-16257
16257/52384
library(ggplot2)
library(gridExtra)
lmiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.imiss", header = T)
head(lmiss)
head(imiss)
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5.5e+05))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 3e+05, label = "25%") +
labs(title = "Before filtering for missingness")
p1
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p2 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,30), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60)) +
labs(title = "")
p2
52383 * 99
895458-741498
153960/5185917
895458/5185917
p1
52384-9843
9843/52384
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5.5e+05))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 3e+05, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5.5e+05))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,6000))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,6000))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.5*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,6000))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.5*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5500))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 5500, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p2 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,30), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60)) +
labs(title = "")
p2
lmiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.imiss", header = T)
p3 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)") +
expand_limits(x = c(0,100), y = c(0,5500))  +
labs(title = "After locus 50% filter")
p3
p4 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,30), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60))
p4
pdf("figures/quality_filtering/core_fugr/core_fugr.lmiss_imiss_distribution.locus_hard_filter.pdf", height = 4, width = 8)
grid.arrange(p1,p2,p3,p4, ncol = 2, widths = c(0.5,0.5))
dev.off()
lmiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.imiss", header = T)
head(lmiss)
head(imiss)
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.5*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5500))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 5500, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p2 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,60), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60)) +
labs(title = "")
p2
###########################################
#First pass -- after remove top 5% loci -- Import new tables and rerun above
lmiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.imiss", header = T)
p3 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)") +
expand_limits(x = c(0,100), y = c(0,5500))  +
labs(title = "After locus 50% filter")
p3
p4 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,60), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60))
p4
pdf("figures/quality_filtering/core_fugr/core_fugr.lmiss_imiss_distribution.locus_hard_filter.pdf", height = 4, width = 8)
grid.arrange(p1,p2,p3,p4, ncol = 2, widths = c(0.5,0.5))
dev.off()
q(save="no")
q(save="no")
q(save="no")
