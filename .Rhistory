Y = read.table("data/Nf/GxE/RDA/Y.noNC.filteredMAC.tsv", header = F, sep = "\t")
SNP_pos = read.csv("data/Nf/GxE/RDA/SNP_pos.noNC.filteredMAC.csv")
sample_ids = read.table("data/Nf/GxE/RDA/sample_ids.noNC", header = F)
#read site metadata
site.info = read.csv("data/sample_metadata/site_info.csv")
site.bioclim = read.csv("data/sample_metadata/Nf.site_bioclim.csv")
site.bioclim = site.bioclim %>% filter(state != "WV" & state != "NC")
site.bioclim
source("data/sample_metadata/world_clim/bioclim_names.txt")
bioclim_var_names
############################
# setting up metadata
site_metadata = left_join(
site.bioclim,
site.info %>% select(state, lat, lon, duration_infection),
by = c("state", "lat", "lon")
) %>% unique()
#sample metadata. Needs to be sorted by sampleIDs
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
sample_metadata.Nf.sorted = sample_metadata.Nf[sample_ids$V1,]
nrow(sample_metadata.Nf.sorted)
sample_metadata.site_info = left_join(sample_metadata.Nf.sorted, site_metadata)
is.na(sample_metadata.site_info$bio1) %>% sum()
row_ids = which(sample_ids$V1 %in% sample_metadata.site_info$Sequence_label)
head(sample_metadata.site_info)
X = sample_metadata.site_info %>%
select(starts_with("bio"), duration_infection)
X
X.uniq = X %>% unique()
nrow(X.uniq)
site_metadata.scaled = apply(
X.uniq,
2,
scale
) %>% as.data.frame
varcors = cor(site_metadata.scaled)
sort(rowSums(abs(varcors) > 0.7))
bioclim_var_names
# we can start with removing bio1, bio11, bio12 first
# we keep bio6 for now (min temp coldest month) bc it may be biologically important
site_metadata.scaled.reduced = site_metadata.scaled %>%
select(-bio1, -bio11, -bio12)
varcors = cor(site_metadata.scaled.reduced)
sort(rowSums(abs(varcors) > 0.7))
bioclim_var_names
# lets remove the quarter estimates (wettest is one of the highest cors now)
# these are repettive with the -est month measures
# remove bio16, bio17, bio10
site_metadata.scaled.reduced = site_metadata.scaled.reduced %>%
select(-bio16, -bio17, -bio10)
varcors = cor(site_metadata.scaled.reduced)
sort(rowSums(abs(varcors) > 0.7))
bioclim_var_names[names(rowSums(varcors > 0.7))]
# bio3 and 4 correlted with each other
# lets go with isothermaility (bio3)
# bio 5 with bio 6 only (0.7)
# bio 7 with bio 3,4,6,9
# let's go with -bio6
site_metadata.scaled.reduced = site_metadata.scaled.reduced %>%
select(-bio6)
varcors = cor(site_metadata.scaled.reduced)
sort(rowSums(abs(varcors) > 0.7))
site_metadata.scaled.reduced = site_metadata.scaled.reduced %>%
select(-bio4, -bio7)
varcors = cor(site_metadata.scaled.reduced)
sort(rowSums(abs(varcors) > 0.7))
site_metadata.scaled.reduced = site_metadata.scaled.reduced %>%
select(-bio19)
varcors = cor(site_metadata.scaled.reduced)
sort(rowSums(abs(varcors) > 0.7))
# last to deal with is precip seasonality versus precip direst month
# we also have precip wettest month included and these are easier to interpret
# than how precip is distrbuted throughout the year
# we exclude bio 15
site_metadata.scaled.reduced = site_metadata.scaled.reduced %>%
select(-bio15)
varcors = cor(site_metadata.scaled.reduced)
sort(rowSums(abs(varcors) > 0.7))
p1 = ggpairs(
site_metadata.scaled.reduced,
columns = 1:ncol(site_metadata.scaled.reduced)
) +
my_gg_theme.def_size +
theme(
axis.text.x = element_text(angle = 55, hjust = 1)
)
bioclim_var_names[names(rowSums(varcors > 0.7))]
X[,rownames(varcors)]
# let's try using a pre-se;ected set (not based on cors)
selected_env = c("bio2", "bio4", "bio5", "bio6", "bio8", "bio9", "bio13", "bio14", "bio18", "bio19", "duration_infection")
#https://popgen.nescent.org/2018-03-27_RDA_GEA.html
#
###################
# there is something of an art to picking the X matrix still
#
# reduced vars
env_mat = X[,rownames(varcors)]
############
# run the RDA
Y.rda <- rda(Y~ ., data=env_mat, scale=T)
Y.rda
# We can visualize this information using a screeplot of the canonical eigenvalues by calling screeplot:
screeplot(Y.rda)
# scree
ggplot() +
geom_line(aes(x=c(1:length(Y.rda$CCA$eig)), y=as.vector(Y.rda$CCA$eig)/sum(Y.rda$CCA$eig)*100), linetype="dotted",
size = 1.5, color="darkgrey") +
geom_point(aes(x=c(1:length(Y.rda$CCA$eig)), y=as.vector(Y.rda$CCA$eig)/sum(Y.rda$CCA$eig)*100), size = 3,
color="darkgrey") +
scale_x_continuous(name = "Ordination axes", breaks=c(1:10)) +
ylab("Inertia") +
theme_bw()
signif.axis = readRDS("data/Nf/GxE/RDA/no_NC.signif_axis.env_reduced.rds")
signif.axis
#from Capblanq, following pcadapt strategy
rdadapt<-function(rda,K)
{
zscores<-Y.rda$CCA$v[,1:as.numeric(K)]
resscale <- apply(zscores, 2, scale)
resmaha <- robust::covRob(resscale, distance = TRUE, na.action= na.omit, estim="pairwiseGK")$dist
lambda <- median(resmaha)/qchisq(0.5,df=K)
reschi2test <- pchisq(resmaha/lambda,K,lower.tail=FALSE)
qval <- qvalue::qvalue(reschi2test)
q.values_rdadapt<-qval$qvalues
return(data.frame(p.values=reschi2test, q.values=q.values_rdadapt))
}
# scree
ggplot() +
geom_line(aes(x=c(1:length(Y.rda$CCA$eig)), y=as.vector(Y.rda$CCA$eig)/sum(Y.rda$CCA$eig)*100), linetype="dotted",
size = 1.5, color="darkgrey") +
geom_point(aes(x=c(1:length(Y.rda$CCA$eig)), y=as.vector(Y.rda$CCA$eig)/sum(Y.rda$CCA$eig)*100), size = 3,
color="darkgrey") +
scale_x_continuous(name = "Ordination axes", breaks=c(1:10)) +
ylab("Inertia") +
theme_bw()
# env selected
# 5 axes reduced (the signif test says 2 sig three mrg)
# 4 axes selected (signif test says 2)
# 4 axes full
last_axis = 2
res_rdadapt<-rdadapt(Y.rda, last_axis)
#note that capblanq also uses q < 0.1
which(res_rdadapt$q.values < 0.05) %>% length
# full data set had 5560 at 0.05
# selected vars has 0 at 0.05
# reduced (non-correalted) vars 5 axes has 3
# reduced 3 axes has 4
which(res_rdadapt$q.values < 0.1) %>% length
# env selected
# 5 axes reduced (the signif test says 2 sig three mrg)
# 4 axes selected (signif test says 2)
# 4 axes full
last_axis = 3
res_rdadapt<-rdadapt(Y.rda, last_axis)
#note that capblanq also uses q < 0.1
which(res_rdadapt$q.values < 0.05) %>% length
# full data set had 5560 at 0.05
# selected vars has 0 at 0.05
# reduced (non-correalted) vars 5 axes has 3
# reduced 3 axes has 4
which(res_rdadapt$q.values < 0.1) %>% length
# env selected
# 5 axes reduced (the signif test says 2 sig three mrg)
# 4 axes selected (signif test says 2)
# 4 axes full
last_axis = 5
res_rdadapt<-rdadapt(Y.rda, last_axis)
#note that capblanq also uses q < 0.1
which(res_rdadapt$q.values < 0.05) %>% length
# full data set had 5560 at 0.05
# selected vars has 0 at 0.05
# reduced (non-correalted) vars 5 axes has 3
# reduced 3 axes has 4
which(res_rdadapt$q.values < 0.1) %>% length
# selected vars including duration infection 36 at 0.1 with 4 axes
# selected vars excluding duration infection has 441 with 2 axes (these axes explain the most var)
# signif axes still running
# non-correalted vars 5 axes has 66
# non-correalted vars 3 axes has 4
#
# manhattan plot outliers
qvalue_max = 0.1
ggplot() +
geom_point(
aes(
x=c(1:length(res_rdadapt[,1])),
y=-log10(res_rdadapt[,1])
),
col = "gray83"
) +
geom_point(
aes(
x=c(1:length(res_rdadapt[,1]))[which(res_rdadapt[,2] <qvalue_max)],
y = -log10(res_rdadapt[which(res_rdadapt[,2] < qvalue_max),1])
),
col = "orange"
) +
xlab("SNPs") + ylab("-log10(p.values)") +
theme_bw()
####################################
# projection of outliers in rda space
# function for axis choice
axis_choice_biplot = function(rda.obj = NULL, choices=c(1,2), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max){
rda.scores = scores(rda.obj, choices = choices, scaling = "symmetric")
ggplot() +
geom_point(
aes(
x=rda.scores$species[which(res_rdadapt$q.values >= qvalue_max),1],
y=rda.scores$species[which(res_rdadapt$q.values >= qvalue_max),2]
),
col = "gray86"
) +
geom_point(
aes(
x=rda.scores$species[which(res_rdadapt$q.values < qvalue_max),1],
y=rda.scores$species[which(res_rdadapt$q.values < qvalue_max),2]
),
col = "orange"
) +
geom_segment(
aes(
xend=rda.scores$biplot[,1],
yend=rda.scores$biplot[,2],
x=0,
y=0
),
colour="black", size=0.5, linetype=1,
arrow=arrow(length = unit(0.02, "npc"))
) +
geom_text(
aes(
x=1.125*rda.scores$biplot[,1],
y=1.125*rda.scores$biplot[,2],
label = rownames(rda.scores$biplot)
)
) +
xlab(paste("RDA",choices[1])) + ylab(paste("RDA",choices[2])) +
theme_bw() +
theme(legend.position="none")
}
axis_choice_biplot(rda.obj = Y.rda, choices = c(1,2), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max)
axis_choice_biplot(rda.obj = Y.rda, choices = c(1,3), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max)
axis_choice_biplot(rda.obj = Y.rda, choices = c(1,4), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max)
axis_choice_biplot(rda.obj = Y.rda, choices = c(1,5), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max)
plot(Y.rda, scaling=3)
plot(Y.rda, choices = c(1, 3), scaling=3)
plot(Y.rda, choices = c(1, 4), scaling=3)
plot(Y.rda, choices = c(1, 5), scaling=3)
# We can visualize this information using a screeplot of the canonical eigenvalues by calling screeplot:
screeplot(Y.rda)
# full data set had 5560 at 0.05
# selected vars has 0 at 0.05
# reduced (non-correalted) vars 5 axes has 3
# reduced 3 axes has 4
which(res_rdadapt$q.values < 0.1) %>% length
# selected vars including duration infection 36 at 0.1 with 4 axes
# selected vars excluding duration infection has 441 with 2 axes (these axes explain the most var)
# signif axes still running
# non-correalted vars 5 axes has 66
# non-correalted vars 3 axes has 4
#
# manhattan plot outliers
qvalue_max = 0.1
ggplot() +
geom_point(
aes(
x=c(1:length(res_rdadapt[,1])),
y=-log10(res_rdadapt[,1])
),
col = "gray83"
) +
geom_point(
aes(
x=c(1:length(res_rdadapt[,1]))[which(res_rdadapt[,2] <qvalue_max)],
y = -log10(res_rdadapt[which(res_rdadapt[,2] < qvalue_max),1])
),
col = "orange"
) +
xlab("SNPs") + ylab("-log10(p.values)") +
theme_bw()
ggplot(
SNP_pos %>% filter(length > 100000),
aes(x = position/10^6, y = rdadapt_qvalue, color = rdadapt_sig)
) +
#facet_wrap(~scaffold) +
facet_grid(. ~ scaffold, scales = "free_x", space='free') +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(breaks = c(0, seq(from = 1, to = 6, by = 1)) ) +
scale_y_continuous(
trans  = scales::compose_trans("log10", "reverse"),
labels = scales::label_log()
) +
scale_color_manual(values = c("grey", "black"), guide = "none") +
my_gg_theme +
labs(x = "Position (Mbp)", y = "") +
theme(
strip.text.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
# selected vars including duration infection 36 at 0.1 with 4 axes
# selected vars excluding duration infection has 441 with 2 axes (these axes explain the most var)
# signif axes still running
# non-correalted vars 5 axes has 66
# non-correalted vars 3 axes has 4
#
# manhattan plot outliers
qvalue_max = 0.1
ggplot() +
geom_point(
aes(
x=c(1:length(res_rdadapt[,1])),
y=-log10(res_rdadapt[,1])
),
col = "gray83"
) +
geom_point(
aes(
x=c(1:length(res_rdadapt[,1]))[which(res_rdadapt[,2] <qvalue_max)],
y = -log10(res_rdadapt[which(res_rdadapt[,2] < qvalue_max),1])
),
col = "orange"
) +
xlab("SNPs") + ylab("-log10(p.values)") +
theme_bw()
####################################
# projection of outliers in rda space
# function for axis choice
axis_choice_biplot = function(rda.obj = NULL, choices=c(1,2), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max){
rda.scores = scores(rda.obj, choices = choices, scaling = "symmetric")
ggplot() +
geom_point(
aes(
x=rda.scores$species[which(res_rdadapt$q.values >= qvalue_max),1],
y=rda.scores$species[which(res_rdadapt$q.values >= qvalue_max),2]
),
col = "gray86"
) +
geom_point(
aes(
x=rda.scores$species[which(res_rdadapt$q.values < qvalue_max),1],
y=rda.scores$species[which(res_rdadapt$q.values < qvalue_max),2]
),
col = "orange"
) +
geom_segment(
aes(
xend=rda.scores$biplot[,1],
yend=rda.scores$biplot[,2],
x=0,
y=0
),
colour="black", size=0.5, linetype=1,
arrow=arrow(length = unit(0.02, "npc"))
) +
geom_text(
aes(
x=1.125*rda.scores$biplot[,1],
y=1.125*rda.scores$biplot[,2],
label = rownames(rda.scores$biplot)
)
) +
xlab(paste("RDA",choices[1])) + ylab(paste("RDA",choices[2])) +
theme_bw() +
theme(legend.position="none")
}
axis_choice_biplot(rda.obj = Y.rda, choices = c(1,2), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max)
axis_choice_biplot(rda.obj = Y.rda, choices = c(1,3), res_rdadapt = res_rdadapt, qvalue_max = qvalue_max)
# plotting genome pos
nrow(SNP_pos) == nrow(res_rdadapt)
SNP_pos$rdadapt_qvalue = res_rdadapt$q.values
SNP_pos$rdadapt_sig = ifelse(SNP_pos$rdadapt_qvalue < qvalue_max, "sig", "n.s.")
ggplot(
SNP_pos %>% filter(length > 100000),
aes(x = position/10^6, y = rdadapt_qvalue, color = rdadapt_sig)
) +
#facet_wrap(~scaffold) +
facet_grid(. ~ scaffold, scales = "free_x", space='free') +
geom_point(alpha = 0.5, size = 1) +
scale_x_continuous(breaks = c(0, seq(from = 1, to = 6, by = 1)) ) +
scale_y_continuous(
trans  = scales::compose_trans("log10", "reverse"),
labels = scales::label_log()
) +
scale_color_manual(values = c("grey", "black"), guide = "none") +
my_gg_theme +
labs(x = "Position (Mbp)", y = "") +
theme(
strip.text.x = element_blank(),
axis.text.x = element_blank(),
axis.title.x = element_blank()
)
Y.rdadapt_sig = Y[,which(res_rdadapt$q.values < qvalue_max)]
SNP_pos.rdadapt_sig = SNP_pos[which(res_rdadapt$q.values < qvalue_max),]
snp_env_cors = matrix(nrow = ncol(Y.rdadapt_sig), ncol =  ncol(env_mat))
colnames(snp_env_cors) = colnames(env_mat)
for (i in 1:ncol(Y.rdadapt_sig)) {
snp_env_cors[i,] <- apply(env_mat,2,function(x) cor(x,Y.rdadapt_sig[,i]))
}
SNP_pos.rdadapt_sig = cbind(SNP_pos.rdadapt_sig, snp_env_cors)
head(SNP_pos.rdadapt_sig)
SNP_pos.rdadapt_sig$max_env_cor = vector(mode = "numeric", length = nrow(SNP_pos.rdadapt_sig))
SNP_pos.rdadapt_sig$max_env_predictor = vector(mode = "character", length = nrow(SNP_pos.rdadapt_sig))
for (i in 1:nrow(SNP_pos.rdadapt_sig)) {
temp.cors <- snp_env_cors[i,]
SNP_pos.rdadapt_sig$max_env_predictor[i] = names(which.max(abs(temp.cors))) # gives the variable
SNP_pos.rdadapt_sig$max_env_cor[i] = temp.cors[which.max(abs(temp.cors))]       # gives the correlation
}
SNP_pos.rdadapt_sig[,c(1,2,17,18)]
# cors with RDA axes
last_axis = 5
rda.axes = data.frame(scores(Y.rda, choices = 1:last_axis, display = "sites"))
snp_axes_cors = matrix(nrow = ncol(Y.rdadapt_sig), ncol =  ncol(rda.axes))
colnames(snp_axes_cors) = colnames(rda.axes)
for (i in 1:ncol(Y.rdadapt_sig)) {
snp_axes_cors[i,] <- apply(rda.axes,2,function(x) cor(x,Y.rdadapt_sig[,i]))
}
SNP_pos.rdadapt_sig = cbind(SNP_pos.rdadapt_sig, snp_axes_cors)
SNP_pos.rdadapt_sig$max_rdaAxis_cor = vector(mode = "numeric", length = nrow(SNP_pos.rdadapt_sig))
SNP_pos.rdadapt_sig$max_rdaAxis_predictor = vector(mode = "character", length = nrow(SNP_pos.rdadapt_sig))
for (i in 1:nrow(SNP_pos.rdadapt_sig)) {
temp.cors <- snp_axes_cors[i,]
SNP_pos.rdadapt_sig$max_rdaAxis_predictor[i] = names(which.max(abs(temp.cors))) # gives the variable
SNP_pos.rdadapt_sig$max_rdaAxis_cor[i] = temp.cors[which.max(abs(temp.cors))]       # gives the correlation
}
SNP_pos.rdadapt_sig[,c(1,2,3,17,18,24,25)]
bioclim_var_names
table(SNP_pos.rdadapt_sig$max_env_predictor)
table(SNP_pos.rdadapt_sig$max_rdaAxis_predictor)
#write.csv(SNP_pos.rdadapt_sig, "data/Nf/GxE/RDA/no_NC.rdadapt_full_env.csv", quote = F, row.names = F)
#write.csv(SNP_pos.rdadapt_sig, "data/Nf/GxE/RDA/no_NC.rdadapt_selected_env.csv", quote = F, row.names = F)
write.csv(SNP_pos.rdadapt_sig, "data/Nf/GxE/RDA/no_NC.rdadapt_reduced_env.csv", quote = F, row.names = F)
# selected vars
env_mat = X[,selected_env]
############
# run the RDA
Y.rda <- rda(Y~ ., data=env_mat, scale=T)
Y.rda
RsquareAdj(Y.rda)
#The eigenvalues for the constrained axes reflect the variance explained by each canonical axis:
summary(eigenvals(Y.rda, model = "constrained"))
# We can visualize this information using a screeplot of the canonical eigenvalues by calling screeplot:
screeplot(Y.rda)
# scree
ggplot() +
geom_line(aes(x=c(1:length(Y.rda$CCA$eig)), y=as.vector(Y.rda$CCA$eig)/sum(Y.rda$CCA$eig)*100), linetype="dotted",
size = 1.5, color="darkgrey") +
geom_point(aes(x=c(1:length(Y.rda$CCA$eig)), y=as.vector(Y.rda$CCA$eig)/sum(Y.rda$CCA$eig)*100), size = 3,
color="darkgrey") +
scale_x_continuous(name = "Ordination axes", breaks=c(1:10)) +
ylab("Inertia") +
theme_bw()
# 2 sig third marginal
signif.axis = readRDS("data/Nf/GxE/RDA/no_NC.signif_axis.env_selected.rds")
signif.axis
plot(signif.axis$Variance[1:length(signif.axis$Variance)-1])
plot(Y.rda, scaling=3)
plot(Y.rda, choices = c(1, 3), scaling=3)
plot(Y.rda, choices = c(1, 4), scaling=3)
plot(Y.rda, scaling=3)
plot(Y.rda, choices = c(1, 4), scaling=3)
plot(Y.rda, scaling=3)
plot(Y.rda, choices = c(1, 3), scaling=3)
res_rdadapt<-rdadapt(Y.rda, last_axis)
#note that capblanq also uses q < 0.1
which(res_rdadapt$q.values < 0.05) %>% length
# full data set had 5560 at 0.05
# selected vars has 0 at 0.05
# reduced (non-correalted) vars 5 axes has 3
# reduced 3 axes has 4
which(res_rdadapt$q.values < 0.1) %>% length
res_rdadapt$q.values < 0.05
#note that capblanq also uses q < 0.1
which(res_rdadapt$q.values < 0.05) %>% length
which(res_rdadapt$q.values < 0.05)
# env selected
# 5 axes reduced (the signif test says 2 sig three mrg)
# 4 axes selected (signif test says 2)
# 4 axes full
last_axis = 4
res_rdadapt<-rdadapt(Y.rda, last_axis)
#note that capblanq also uses q < 0.1
which(res_rdadapt$q.values < 0.05) %>% length
# full data set had 5560 at 0.05
# selected vars has 0 at 0.05
# reduced (non-correalted) vars 5 axes has 3
# reduced 3 axes has 4
which(res_rdadapt$q.values < 0.1) %>% length
which(res_rdadapt$q.values < 0.05)
bioclim_var_names
q(save="no")
vcf <- read.vcfR("data/Nf/final_tables/rm_dups/FINAL_snp.IBD_analyses.vcf.gz", verbose = FALSE)
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
library(dplyr)
library(vcfR)
vcf <- read.vcfR("data/Nf/final_tables/rm_dups/FINAL_snp.IBD_analyses.vcf.gz", verbose = FALSE)
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nf %>% head
sample_metadata.Nf %>% select(Sequence_label)
data.frame(label = sample_metadata.Nf %>% select(Sequence_label), pop = rep("a", nrow(sample_metadata.Nf)) )
write.table( data.frame(label = sample_metadata.Nf %>% select(Sequence_label), pop = rep("a", nrow(sample_metadata.Nf)) ), "data/sample_metadata/Nf.single_pixy_pop.tsv", sep = "\t", col.names = F, row.names = F, quote = F)
# Nd
vcf <- read.vcfR("data/Nd/final_tables/rm_dups/FINAL_snp.IBD_analyses.vcf.gz", verbose = FALSE)
sample_metadata.Nd = read.csv("data/sample_metadata/Nd_filtered.lat_lon_dur_inf.csv")
data.frame(label = sample_metadata.Nd %>% select(Sequence_label), pop = rep("a", nrow(sample_metadata.Nd)))
write.table( data.frame(label = sample_metadata.Nd %>% select(Sequence_label), pop = rep("a", nrow(sample_metadata.Nd)) ), "data/sample_metadata/Nd.single_pixy_pop.tsv", sep = "\t", col.names = F, row.names = F, quote = F)
sample_metadata.Nc = read.csv("data/sample_metadata/Nc_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nc = read.csv("data/sample_metadata/Nc_canton_loc_date.lat_lon.csv")
sample_metadata.Nc
write.table( data.frame(label = sample_metadata.Nc %>% select(Sequence_label), pop = rep("a", nrow(sample_metadata.Nc)) ), "data/sample_metadata/Nc.single_pixy_pop.tsv", sep = "\t", col.names = F, row.names = F, quote = F)
q(save="no")
