p3 = ggplot(Nf.long, aes(x = durDif, y = SNPsPerKb)) +
geom_point(alpha = 0.16, shape = 1) +
geom_smooth(method = "lm", linetype = 1, color = "white", linewidth = 2) +
geom_smooth(method = "lm", linetype = 1, color = "black") +
labs(x = "Difference in infestation duration (years)", y = "", title = "b") +
annotate(
geom = "text",
label = expr(paste("Mantel r = ", !!Nf.dur.mantel.stat, ", ", italic("P"), " = ", !!Nf.dur.mantel.sig)),
x = max(Nf.long$durDif),#61,
y = min(Nf.long$SNPsPerKb),#2.5,
hjust = 1
) +
scale_y_continuous(breaks = c(2,3,4,5)) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.03, vjust = -1),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
plot.margin = margin(l = 12, r = 5.5, b = 5.5, t = 5.5)
)
p3
p4 = ggplot(Nd.long, aes(x = durDif, y = SNPsPerKb)) +
geom_point(alpha = 0.35, shape = 1) +
geom_smooth(method = "lm", linetype = 2, color = "black") +
labs(x = "Difference in infestation duration (years)", y = "", title = "d") +
scale_y_continuous(breaks = c(1,4,7,10)) +
annotate(
geom = "text",
label = expr(paste("Mantel r = ", !!Nd.dur.mantel.stat, ", ", italic("P"), " = ", !!Nd.dur.mantel.sig)),
x = max(Nd.long$durDif),#69,
y = min(Nd.long$SNPsPerKb),#0.75,
hjust = 1
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.03, vjust = -1),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_blank(),
plot.margin = margin(l = 12, r = 5.5, b = 5.5, t = 5.5)
)
p4
p5 = ggplot(Nf_pop.long, aes(x = km, y = dxy*10^3)) +
geom_smooth(method = "lm", linetype = 1, color = "black", se = T) +
geom_point(shape = 1) +
labs(x = "Geographic distance (km)",
y = expression(paste(d[xy], " (SNPs Kb"^-1,")")),
title = "e"
) +
annotate(
geom = "text",
label = expr(paste("Mantel r = ", !!Nf_pop.geo.mantel.stat, ", ", italic("P"), " = ", !!Nf_pop.geo.mantel.sig)),
x = max(Nf_pop.long$km),#1410,
y = min(Nf_pop.long$dxy*10^3),
hjust = 1
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.10, vjust = -1),
axis.title.y = element_text(margin = margin(t = 0, r = 1.5, b = 0, l = 0))
)
p5
p6 = ggplot(Nf_pop.long, aes(x = dur_dist, y = dxy*10^3)) +
geom_smooth(method = "lm", linetype = 1, color = "black", se = T) +
geom_point(shape = 1) +
labs(
x = "Difference in infestation duration (years)",
y = "",
title = "f"
) +
annotate(
geom = "text",
label = expr(paste("Mantel r = ", !!Nf_pop.dur.mantel.stat, ", ", italic("P"), " = ", !!Nf_pop.dur.mantel.sig)),
x = max(Nf_pop.long$dur_dist),#50
y = min(Nf_pop.long$dxy*10^3),
hjust = 1
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.03, vjust = -1),
axis.title.y = element_blank(),
axis.text.y = element_blank(),
plot.margin = margin(l = 12, r = 5.5, b = 5.5, t = 5.5)
)
p6
gp1 = ggplotGrob(p1)
gp2 = ggplotGrob(p2)
gp3 = ggplotGrob(p3)
gp4 = ggplotGrob(p4)
gp5 = ggplotGrob(p5)
gp6 = ggplotGrob(p6)
gcol1 = rbind(gp1, gp2, gp5)
gcol2 = rbind(gp3, gp4, gp6)
pdf("figures/pop_gen/IBD/IBD_durationInfection.six_panel.pdf", width = 10, height = 10)
grid.arrange(gcol1, gcol2, ncol = 2, widths = c(0.525, 0.475))
dev.off()
pdf("figures/pop_gen/IBD/IBD_durationInfection.six_panel.png", width = 10, height = 10, units = "in", res = 300)
png("figures/pop_gen/IBD/IBD_durationInfection.six_panel.png", width = 10, height = 10, units = "in", res = 300)
grid.arrange(gcol1, gcol2, ncol = 2, widths = c(0.525, 0.475))
dev.off()
q(save="no")
library(dplyr)
library(tidyr)
library(geosphere)
library(vegan)
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
state_n = sample_metadata.Nf %>% group_by(state) %>% summarise(n = n())
state_n %>% print(n = Inf)
#filter based on n
n_min = 4
low_n = state_n %>% filter(n < n_min) %>% pull(state)
fst = read.table("data/Nf/pixy/whole_contig/pixy_fst.txt", header = T)
fst_means = fst %>%
group_by(pop1, pop2) %>%
summarize(fst_mean = mean(avg_wc_fst, na.rm = T))
fst_means
#########
#########
#QC.OUC to NJ is NA
fst_means %>%
filter(!pop1 %in% low_n & !pop2 %in% low_n) -> fst_means.min_n
fst_means.min_n
dfr <- reshape(data.frame(fst_means.min_n), direction="wide", idvar="pop1", timevar="pop2")
head(dfr)
fst_means %>% filter(pop2 == "CT" & pop1 == "ME.N")
class(dfr)
dfr.ordered = dfr[order(rowSums(is.na(dfr)), decreasing = T),order(colSums(is.na(dfr)), decreasing = F)]
rownames(dfr.ordered) = dfr.ordered$pop1
#pop1 is the first col
dfr.ordered[,"pop1"] = NULL
#the colnames have extra text
colnames(dfr.ordered) = sub("fst_mean.", "", colnames(dfr.ordered))
class(dfr.ordered)
dfr.ordered %>% lower.tri()
dfr.ordered %>% upper.tri()
fst.mat = matrix(nrow = nrow(dfr.ordered)+1, ncol = ncol(dfr.ordered)+1)
fst.mat[lower.tri(fst.mat)] %>% length
dfr.ordered[!is.na(dfr.ordered)] %>% length
fst.mat[lower.tri(fst.mat)] = dfr.ordered[!is.na(dfr.ordered)]
#convert negative values to zero (standard for Fst where negative means there is
# more variability within than between pops and is interpreted as sample size
# effect (i.e., 1 pop has larger sample size)
fst.mat[fst.mat < 0] = 0
#full site order (1-16)
# need to add the last index of rownames to colnames
# (or the first of colnames to rownames) bc pixy outputs *unique* pairwise comps
# i.e., a lower/upper triangle comps matrix
sites_ordered = c(colnames(dfr.ordered), tail(rownames(dfr.ordered), 1))
colnames(fst.mat) = sites_ordered
rownames(fst.mat) = sites_ordered
fst.dist = as.dist(fst.mat)
saveRDS(object = fst.dist, file = "data/Nf/pixy/whole_contig/fst_dist.rds")
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
source("library/ggplot_theme.txt")
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
state_n = sample_metadata.Nf %>% group_by(state) %>% summarise(n = n())
state_n %>% print(n = Inf)
#filter based on n
n_min = 4
low_n = state_n %>% filter(n < n_min) %>% pull(state)
fst.dist = readRDS("data/Nf/pixy/whole_contig/fst_dist.rds")
fst.mat = as.matrix(fst.dist)
fst.mat[upper.tri(fst.mat)] = NA
diag(fst.mat) = NA
fst.mat %>%
as.data.frame %>%
rownames_to_column("pop1") %>%
pivot_longer(-pop1, names_to = "pop2", values_to = "Fst") -> fst.df
factor_order = rownames(fst.mat)
factor_order2 = c("VA", "NH.CW", "WV", factor_order[!factor_order %in% c("VA", "NH.CW", "WV")])
p1 = ggplot(fst.df, # %>% filter(!is.na(Fst)),
aes(
factor(pop1, levels = rev(factor_order)),
factor(pop2, levels = factor_order),
fill = Fst)
) +
geom_tile() +
my_gg_theme.def_size +
scale_fill_gradient(low = "white", high = "red", na.value = "light grey") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "inside",
legend.position.inside = c(0.914, 0.8125),
legend.background = element_rect(color = "black"),
axis.text.x = element_text(angle = 55, hjust = 1)
)
p1
fst.dist = readRDS("data/Nf/pixy/windowed_10kb/fst_dist.window_avg.rds")
fst.mat = as.matrix(fst.dist)
fst.mat[upper.tri(fst.mat)] = NA
diag(fst.mat) = NA
fst.mat %>%
as.data.frame %>%
rownames_to_column("pop1") %>%
pivot_longer(-pop1, names_to = "pop2", values_to = "Fst") -> fst.df
factor_order = rownames(fst.mat)
factor_order2 = c("VA", "NH.CW", "WV", factor_order[!factor_order %in% c("VA", "NH.CW", "WV")])
p1 = ggplot(fst.df, # %>% filter(!is.na(Fst)),
aes(
factor(pop1, levels = rev(factor_order)),
factor(pop2, levels = factor_order),
fill = Fst)
) +
geom_tile() +
my_gg_theme.def_size +
scale_fill_gradient(low = "white", high = "red", na.value = "light grey") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "inside",
legend.position.inside = c(0.914, 0.8125),
legend.background = element_rect(color = "black"),
axis.text.x = element_text(angle = 55, hjust = 1)
)
p1
p1 = ggplot(fst.df, # %>% filter(!is.na(Fst)),
aes(
factor(pop1, levels = rev(factor_order)),
factor(pop2, levels = factor_order),
fill = Fst)
) +
geom_tile() +
my_gg_theme.def_size +
scale_fill_gradient(low = "white", high = "red", na.value = "light grey") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "inside",
#legend.position.inside = c(0.914, 0.8125),
legend.position.inside = c(Inf, Inf),
legend.background = element_rect(color = "black"),
axis.text.x = element_text(angle = 55, hjust = 1)
)
p1
p1 = ggplot(fst.df, # %>% filter(!is.na(Fst)),
aes(
factor(pop1, levels = rev(factor_order)),
factor(pop2, levels = factor_order),
fill = Fst)
) +
geom_tile() +
my_gg_theme.def_size +
scale_fill_gradient(low = "white", high = "red", na.value = "light grey") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "inside",
legend.position.inside = c(0.914, 0.8125),
legend.background = element_rect(color = "black"),
axis.text.x = element_text(angle = 55, hjust = 1)
)
p1
q(save="no")
library(dplyr)
library(tidyr)
library(tibble)
library(ggplot2)
source("library/ggplot_theme.txt")
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
state_n = sample_metadata.Nf %>% group_by(state) %>% summarise(n = n())
state_n %>% print(n = Inf)
#filter based on n
n_min = 4
low_n = state_n %>% filter(n < n_min) %>% pull(state)
fst.dist = readRDS("data/Nf/pixy/whole_contig/fst_dist.rds")
fst.mat = as.matrix(fst.dist)
fst.mat[upper.tri(fst.mat)] = NA
diag(fst.mat) = NA
fst.mat %>%
as.data.frame %>%
rownames_to_column("pop1") %>%
pivot_longer(-pop1, names_to = "pop2", values_to = "Fst") -> fst.df
factor_order = rownames(fst.mat)
factor_order2 = c("VA", "NH.CW", "WV", factor_order[!factor_order %in% c("VA", "NH.CW", "WV")])
p1 = ggplot(fst.df, # %>% filter(!is.na(Fst)),
aes(
factor(pop1, levels = rev(factor_order)),
factor(pop2, levels = factor_order),
fill = Fst)
) +
geom_tile() +
my_gg_theme.def_size +
scale_fill_gradient(low = "white", high = "red", na.value = "light grey") +
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
legend.position = "inside",
legend.position.inside = c(0.914, 0.8125),
legend.background = element_rect(color = "black"),
axis.text.x = element_text(angle = 55, hjust = 1)
)
p1
pdf("figures/pop_gen/pixy/Fst_lower_tri.whole_contig_calc.pdf", width = 5, height = 5)
p1
dev.off()
q(save="no")
library(dplyr)
library(ggplot2)
source("library/ggplot_theme.txt")
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
state_n = sample_metadata.Nf %>% group_by(state) %>% summarise(n = n())
state_n %>% print(n = Inf)
#filter based on n
n_min = 4
low_n = state_n %>% filter(n < n_min) %>% pull(state)
########################
#setting up geo distance
site_dat = sample_metadata.Nf %>%
select(state, duration_infection) %>%
filter(!state %in% low_n) %>%
distinct
pi_dat = read.table("data/Nf/pixy/windowed_10kb/pixy_pi.txt", header = T)
pi_dat.means = pi_dat %>%
group_by(pop) %>%
summarize(pi_mean = sum(count_diffs, na.rm = T)/(sum(count_comparisons, na.rm = T)/1000))
colnames(pi_dat.means)[1] = "state"
pi_dat.meta = left_join(pi_dat.means %>% filter(!state %in% low_n), site_dat)
plot(pi_mean ~ duration_infection, pi_dat.meta)
cor(pi_dat.meta$pi_mean, pi_dat.meta$duration_infection)
cor.test(pi_dat.meta$pi_mean, pi_dat.meta$duration_infection)
tajD.vk = read.csv("data/Nf/pixy/tajD.vcfkit.csv")
colnames(tajD.vk)[2] = "TajimaD.vk"
tajD.snpR = read.csv("data/Nf/pixy/tajD.snpR.csv")
colnames(tajD.snpR)[4] = "TajimaD.snpR"
tajD.snpR
all_dat = left_join(pi_dat.meta, tajD.vk, by = c("state", "duration_infection")) %>%
left_join(.,tajD.snpR)
#check correaltion between the dif tajD measures
plot(TajimaD.vk ~ TajimaD.snpR, all_dat)
cor(all_dat$TajimaD.vk, all_dat$TajimaD.snpR)
cor.test(all_dat$TajimaD.vk, all_dat$TajimaD.snpR)
#vk D
plot(TajimaD.vk ~ duration_infection, all_dat)
cor(all_dat$TajimaD.vk, all_dat$duration_infection)
cor.test(all_dat$TajimaD.vk, all_dat$duration_infection)
#snpR D
plot(TajimaD.snpR ~ duration_infection, all_dat)
cor(all_dat$TajimaD.snpR, all_dat$duration_infection)
cor.test(all_dat$TajimaD.snpR, all_dat$duration_infection)
#snpR ws_theta
plot(global_ws.theta ~ duration_infection, all_dat)
cor(all_dat$global_ws.theta, all_dat$duration_infection)
cor.test(all_dat$global_ws.theta, all_dat$duration_infection)
#snpR ts_theta
plot(global_ts.theta ~ duration_infection, all_dat)
cor(all_dat$global_ts.theta, all_dat$duration_infection)
cor.test(all_dat$global_ts.theta, all_dat$duration_infection)
#snpR n_seg
plot(global_num_seg ~ duration_infection, all_dat)
cor(all_dat$global_num_seg, all_dat$duration_infection)
cor.test(all_dat$global_num_seg, all_dat$duration_infection)
#snpR D
plot(TajimaD.snpR ~ duration_infection, all_dat)
#vk D
plot(TajimaD.vk ~ duration_infection, all_dat)
#snpR D
plot(TajimaD.snpR ~ duration_infection, all_dat)
#vk D
plot(TajimaD.vk ~ duration_infection, all_dat)
#snpR D
plot(TajimaD.snpR ~ duration_infection, all_dat)
cor(all_dat$TajimaD.snpR, all_dat$duration_infection)
cor.test(all_dat$TajimaD.snpR, all_dat$duration_infection)
#vk D
plot(TajimaD.vk ~ duration_infection, all_dat)
cor(all_dat$TajimaD.vk, all_dat$duration_infection)
cor.test(all_dat$TajimaD.vk, all_dat$duration_infection)
#snpR ws_theta
plot(global_ws.theta ~ duration_infection, all_dat)
cor(all_dat$global_ws.theta, all_dat$duration_infection)
cor.test(all_dat$global_ws.theta, all_dat$duration_infection)
#snpR ws_theta
plot(global_ws.theta ~ all_dat$TajimaD.snpR, all_dat)
cor(all_dat$global_ws.theta, all_dat$duration_infection)
cor.test(all_dat$global_ws.theta, all_dat$duration_infection)
cor(all_dat$global_ws.theta, all_dat$TajimaD.snpR)
cor.test(all_dat$global_ws.theta, all_dat$TajimaD.snpR)
#snpR ws_theta
plot(global_ts.theta ~ all_dat$TajimaD.snpR, all_dat)
cor(all_dat$global_ts.theta, all_dat$TajimaD.snpR)
cor.test(all_dat$global_ts.theta, all_dat$TajimaD.snpR)
site_cols = read.csv("data/sample_metadata/Nf_site_colors.csv")
all_dat
#snpR D
plot(TajimaD.snpR ~ duration_infection, all_dat)
#snpR ws_theta
plot(global_ws.theta ~ duration_infection, all_dat)
library(dplyr)
library(vcfR)
#library(adegenet)
library(snpR)
# might need to import dartR, if the gl2snpR conversion fails try loading it
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
#########
#prev used table of sample,state.name,lat,lon
ind.metrics = sample_metadata.Nf %>% select(Sequence_label, state, lat, lon)
colnames(ind.metrics) = c("sampID", "pop", "lat", "lon")
sub("\\.", "_", ind.metrics$pop) -> ind.metrics$pop #snpR does not accept "." ... beyond annoying
row.names(ind.metrics) = ind.metrics$sampID
#filtered VCF
# bialleles only
#
vcf <- read.vcfR("data/Nf/final_tables/rm_dups/FINAL_snp.biallele.vcf.gz", verbose = FALSE)
gt = extract.gt(vcf, element='GT', as.numeric=TRUE)
gt.pos_list = strsplit(row.names(gt), "_")
gt.pos_df = data.frame(
chr = paste(
lapply(gt.pos_list, function(x) x[1]) %>% unlist,
lapply(gt.pos_list, function(x) x[2]) %>% unlist,
sep = "_"
),
position = lapply(gt.pos_list, function(x) x[3]) %>% unlist,
stringsAsFactors = F
) #note these column names must be chr and position for snpR
gt = data.frame(gt)
nrow(gt)
nrow(gt.pos_df)
gt[is.na(gt)] = "NN"
head(gt)
dat = import.snpR.data(gt, snp.meta = gt.pos_df, sample.meta = ind.metrics)
dat
all_dat
#note ts.theta is the version ofpi used in the snpR calc
plot(global_ts.theta ~ pi_mean, all_dat)
cor(all_dat$global_ts.theta, all_dat$pi_mean)
cor.test(all_dat$global_ts.theta, all_dat$pi_mean)
?calc_seg_sites
head(dat)
foo_seg = calc_seg_sites(
dat,
facets = c("pop", "chr"),
rarefaction = T,
g = 4
)
foo_seg = calc_seg_sites(
dat,
facets = c("pop"]),
foo_seg = calc_seg_sites(
dat,
facets = c("pop"),
rarefaction = T,
g = 4
)
ind.metrics
state_n = sample_metadata.Nf %>% group_by(state) %>% summarise(n = n())
state_n %>% print(n = Inf)
#filter based on n
n_min = 4
low_n = state_n %>% filter(n < n_min) %>% pull(state)
#########
#prev used table of sample,state.name,lat,lon
ind.metrics = sample_metadata.Nf %>%
select(Sequence_label, state, lat, lon) %>%
filter(!state %in% low_n)
colnames(ind.metrics) = c("sampID", "pop", "lat", "lon")
sub("\\.", "_", ind.metrics$pop) -> ind.metrics$pop #snpR does not accept "." ... beyond annoying
row.names(ind.metrics) = ind.metrics$sampID
gt = extract.gt(vcf, element='GT', as.numeric=TRUE)
colnames(gt)
nrow(ind.metrics)
ind.metrics
gt.low_n = gt[,colnames(gt) %in% ind.metrics$sampID]
ncol(gt.low_n)
gt.pos_list = strsplit(row.names(gt.low_n), "_")
gt.pos_df = data.frame(
chr = paste(
lapply(gt.pos_list, function(x) x[1]) %>% unlist,
lapply(gt.pos_list, function(x) x[2]) %>% unlist,
sep = "_"
),
position = lapply(gt.pos_list, function(x) x[3]) %>% unlist,
stringsAsFactors = F
) #note these column names must be chr and position for snpR
gt = data.frame(gt.low_n)
nrow(gt)
nrow(gt.pos_df)
gt[is.na(gt)] = "NN"
head(gt)
dat = import.snpR.data(gt, snp.meta = gt.pos_df, sample.meta = ind.metrics)
dat
foo_seg = calc_seg_sites(
dat,
facets = c("pop", "chr"),
rarefaction = T,
g = 4
)
foo_seg = calc_seg_sites(
dat,
facets = c("pop", "chr"),
rarefaction = T
)
#bi-allelic snpRdata with 969175 SNPs and 115 samples.
#Calculated statistics can be accessed via get.snpR.stats()
#
#
#
foo = calc_tajimas_d(
dat,
facets = c("pop", "chr"),
#sigma = 100, #sliding window size in kb
#step = 200, #defulat = sigma*2 (non-overlapping windows)
par = 5, #number cores
#triple_sigma = F, #this is for smoothing, calcualtes average in window of 3xsigma
global = T #use this to just calculate global
)
q(save="no")
