coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14)
)
################################
#ggdendro with coloring of branches
source("library/dendro_data_k.r")
k = 4   # Number of clusters
dendr = dendro_data_k(Nf.dendro, k = k)
#####################
#Add heights and cols to leaves for plotting points
#leaves = Nf.dendro %>% dendextend::get_nodes_attr("leaf")
#leaf_height = Nf.dendro %>% dendextend::get_leaves_attr("height")
#dendr$labels$leaf_height = leaf_height
dendr$labels = full_join(dendr$labels, sample_metadata)
#with points
p3 = ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4) +
scale_shape_manual(values = c(23, 21)) +
scale_fill_manual(values =  c25) +
scale_y_reverse(expand = c(0.2, 0)) +
labs(x = NULL, y = NULL, fill = "State/region") +
coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14)
)
p3
p3 = ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4) +
scale_shape_manual(values = c(23, 21)) +
scale_fill_manual(values =  c25) +
scale_y_reverse(expand = c(0.2, 0)) +
labs(x = NULL, y = NULL, fill = "State/region") +
coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = c(0.8, 0.75)
)
p3
p3 = ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4)
p3
dendr = dendro_data_k(Nf.dendro, k = k)
dendr$labels = full_join(dendr$labels, sample_metadata)
dendr$labels
p3 = ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4) +
scale_shape_manual(values = c(23, 21)) +
scale_fill_manual(values = c25) +
scale_y_reverse(expand = c(0.2, 0)) +
labs(x = NULL, y = NULL, fill = "State/region") +
coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = c(0.8, 0.75)
)
p3
ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4) +
# scale_shape_manual(values = c(23, 21)) +
scale_fill_manual(values = c25) +
scale_y_reverse(expand = c(0.2, 0)) +
labs(x = NULL, y = NULL, fill = "State/region") +
coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = c(0.8, 0.75)
)
p3
p3 = ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4) +
# scale_shape_manual(values = c(23, 21)) +
scale_fill_manual(values = c25) +
scale_y_reverse(expand = c(0.2, 0)) +
labs(x = NULL, y = NULL, fill = "State/region") +
coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = c(0.8, 0.75)
)
p3
p3 = ggplot() +
geom_segment(data = dendr$segments,
aes(x=x, y=y, xend=xend, yend=yend, colour=factor(clust)),
lineend = "square", show.legend = FALSE) +
scale_colour_manual(values = c("grey60", c25)) +
geom_point(data = dendr$labels, aes(x = x, y = leaf_height, fill = state, shape = collection_period), size = 4, shape = 21) +
scale_shape_manual(values = c(23, 21)) +
scale_fill_manual(values = c25) +
scale_y_reverse(expand = c(0.2, 0)) +
labs(x = NULL, y = NULL, fill = "State/region") +
coord_flip() +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = c(0.8, 0.75)
)
p3
pdf("figures/pop_gen/phylogeny/Nf.ML_tree.k_4.pdf", height = 12, width = 12)
p3
dev.off()
p1 = ggplot() +
geom_segment(data = ddata$segments, aes(x = x, y = y, xend = xend, yend = yend)) +
geom_point(data = ddata$labels, aes(x = x, y = leaf_height, color = state, shape = collection_period), size = 4) +
scale_color_manual(values = c25) +
scale_shape_manual(values = c(18, 16)) +
coord_flip() +
# coord_polar() +
scale_y_reverse() +
labs(color = "State/region") +
theme_dendro() +
theme(
legend.text = element_text(size = 12),
legend.title = element_text(size = 14),
legend.position = c(0.8,0.75)
)
p1
pdf("figures/pop_gen/phylogeny/Nf_ML_tree.pdf", height = 12, width = 8)
p1
dev.off()
q(save="no")
library(vcfR)
#library(tidyr)
#library(dplyr)
#library(ggplot2)
#library(pegas)
#library(reshape2)
library(adegenet)
source("library/ggplot_theme.txt")
#library(tidyr)
#library(dplyr)
library(ggplot2)
source("library/ggplot_theme.txt")
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
#filtered VCF
vcf.Nf <- read.vcfR("data/Nf/final_tables/rm_dups/FINAL_snp.IBD_analyses.vcf.gz", verbose = FALSE)
gl.Nf = vcfR2genlight(vcf.Nf)
?dist
# 47047 alleles excluded
rm(vcf.Nf)
gc()
gl.Nf
1116217-450016
?pml
#library(pegas)
#library(reshape2)
library(adegenet)
?pml
library(phangorn)
?pml
?dist.hamming
?dist.p
?dist.dna
q(save="no")
# read SNP multi seq aligment fasta
seqs.NF = read.phyDat(
file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta",
format = "fasta",
type = "DNA"
)
#library(vcfR)
library(phangorn)
# read SNP multi seq aligment fasta
seqs.NF = read.phyDat(
file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta",
format = "fasta",
type = "DNA"
)
dist.Nf = phangorn::dist.hamming(x = seqs.NF, ratio = T, exclude = "pairwise")
dist.Nf
dist.Nf = phangorn::dist.hamming(x = seqs.NF, ratio = F, exclude = "pairwise")
head(dist.Nf)
rm(seqs.NF)
gc()
# read SNP multi seq aligment fasta
seqs.Nf = read.phyDat(
file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta",
format = "fasta",
type = "DNA"
)
dist.Nf = phangorn::dist.hamming(x = seqs.Nf, ratio = T, exclude = "pairwise")
dist.Nf
seqs.Nf
head(dist.Nf * 997132)
dist.raw.Nf = phangorn::dist.dna(x = seqs.Nf, model = "raw", pairwise.deletion = T)
?dist.dna
dist.raw.Nf = ape::dist.dna(x = seqs.Nf, model = "raw", pairwise.deletion = T)
dist.raw.Nf = ape::dist.dna(x = seqs.Nf, model = "N", pairwise.deletion = T)
dist.raw.Nf = ape::dist.dna(x = seqs.Nf, model = raw, pairwise.deletion = T)
# read SNP multi seq aligment fasta
dnaBin.Nf = fasta2DNAbin(file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
#library(dplyr)
#library(pegas)
#library(reshape2)
library(adegenet)
# read SNP multi seq aligment fasta
dnaBin.Nf = adegenet::fasta2DNAbin(file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
dist.raw.Nf = ape::dist.dna(x = dnaBin.Nf, model = "raw", pairwise.deletion = T)
dist.raw.Nf
head(dist.raw.Nf * 997132)
q(save="no")
#library(vcfR)
#library(phangorn)
#library(dplyr)
#library(pegas)
#library(reshape2)
library(adegenet)
# read SNP multi seq aligment fasta
dnaBin.Nf = adegenet::fasta2DNAbin(file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
dist.raw.Nf = ape::dist.dna(x = dnaBin.Nf, model = "raw", pairwise.deletion = T)
dist.raw.Nd = ape::dist.dna(x = dnaBin.Nd, model = "raw", pairwise.deletion = T)
dnaBin.Nd = adegenet::fasta2DNAbin(file = "data/Nd/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
dist.raw.Nd = ape::dist.dna(x = dnaBin.Nd, model = "raw", pairwise.deletion = T)
saveRDS(dist.raw.Nf, "data/Nf/IBD/hamming_dist.rds")
q(save="no")
library(pegas)
dist.raw.Nf = readRDS("data/Nf/IBD/hamming_dist.rds")
dist.raw.Nd = readRDS("data/Nd/IBD/hamming_dist.rds")
library(adegenet)
saveRDS(dist.raw.Nf, "data/Nf/IBD/hamming_dist.rds")
dnaBin.Nd = adegenet::fasta2DNAbin(file = "data/Nd/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
dist.raw.Nd = ape::dist.dna(x = dnaBin.Nd, model = "raw", pairwise.deletion = T)
saveRDS(dist.raw.Nd, "data/Nd/IBD/hamming_dist.rds")
sample_metadata.Nd = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
q(save="no")
library(pegas)
dist.raw.Nf = readRDS("data/Nf/IBD/hamming_dist.rds")
dist.raw.Nd = readRDS("data/Nd/IBD/hamming_dist.rds")
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
rownames(dist.raw.Nf )
names(dist.raw.Nf )
dist.raw.Nf
colnames(dist.raw.Nf )
as.matrix(dist.raw.Nf )
as.matrix(dist.raw.Nf ) %>% rownames
library(dplyr)
as.matrix(dist.raw.Nf ) %>% rownames
as.matrix(dist.raw.Nf ) %>% rownames %>% length
as.matrix(dist.raw.Nf ) %>% colnames %>% length
sample_metadata.Nf$Sequence_label
library(dplyr)
?order
?match
order(dist.order.Nf, sample_metadata.Nf)
dist.order.Nf = as.matrix(dist.raw.Nf ) %>% colnames
dist.order.Nd = as.matrix(dist.raw.Nd ) %>% colnames
order(dist.order.Nf, sample_metadata.Nf)
dist.order.Nf
order(dist.order.Nf, sample_metadata.Nf$Sequence_label)
sample_metadata.Nf$Sequence_label
dist.order.Nf
sample_metadata.Nf[order(dist.order.Nf, sample_metadata.Nf$Sequence_label), "Sequence_label"]
sample_metadata.Nf[order(sample_metadata.Nf$Sequence_label, dist.order.Nf), "Sequence_label"]
as.matrix(dist.raw.Nf ) %>% rownames
as.matrix(dist.raw.Nf ) %>% colnames
dist.order.Nf = as.matrix(dist.raw.Nf ) %>% rownames
dist.order.Nd = as.matrix(dist.raw.Nd ) %>% rownames
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nf[order(sample_metadata.Nf$Sequence_label, dist.order.Nf), "Sequence_label"]
sample_metadata.Nf[dist.order.Nf), "Sequence_label"]
sample_metadata.Nf[dist.order.Nf, "Sequence_label"]
dist.raw.Nf[sample_metadata.Nf$Sequence_label, sample_metadata.Nf$Sequence_label]
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
sample_metadata.Nf[dist.order.Nf, "Sequence_label"]
hier.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
site = sample_metadata.Nf[dist.order.Nf, "state.name"]
)
sample_metadata.Nf$state
hier.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
site = sample_metadata.Nf[dist.order.Nf, "state"]
)
hier.Nf
hier.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
site = sample_metadata.Nd[dist.order.Nd, "state"]
)
hier.Nd
hier.Nf
dist.order.Nd = as.matrix(dist.raw.Nd ) %>% rownames
sample_metadata.Nd = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
hier.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
site = sample_metadata.Nd[dist.order.Nd, "state"]
)
hier.Nd
dist.order.Nd
dist.raw.Nd = readRDS("data/Nd/IBD/hamming_dist.rds")
dist.order.Nd = as.matrix(dist.raw.Nd ) %>% rownames
dist.order.Nd
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
hier.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
site = sample_metadata.Nf[dist.order.Nf, "state"]
)
hier.Nf
hier.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
site = sample_metadata.Nd[dist.order.Nd, "state"]
)
hier.Nd
sample_metadata.Nd
sample_metadata.Nd$Sequence_label
sample_metadata.Nd = read.csv("data/sample_metadata/Nd_filtered.lat_lon_dur_inf.csv")
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
hier.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
site = sample_metadata.Nd[dist.order.Nd, "state"]
)
hier.Nd
pegas::amova(
dist.raw.Nf ~ site/samp,
is.squared = F,
data = hier.Nf,
nperm = 0
)
str(hier.Nd)
hier.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
site = sample_metadata.Nf[dist.order.Nf, "state"],
stringsAsFactors = T
)
hier.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
site = sample_metadata.Nd[dist.order.Nd, "state"],
stringsAsFactors = T
)
pegas::amova(
dist.raw.Nf ~ site/samp,
is.squared = F,
data = hier.Nf,
nperm = 0
)
pegas::amova(
dist.raw.Nf ~ site,
is.squared = F,
data = hier.Nf,
nperm = 0
)
library(vcfR)
library(adegent)
library(poppr)
library(vcfR)
library(adegenet)
library(poppr)
install.packages("poppr")
library(poppr)
vcf.Nf <- read.vcfR("data/Nf/final_tables/rm_dups/FINAL_snp.IBD_analyses.vcf.gz", verbose = FALSE)
gl.Nf = vcfR2genlight(vcf.Nf) #note that genlight object only supports bialleles
# 47047 alleles excluded
# #note that this does not match the number of sites removed by vcftools (666201)
rm(vcf.Nf)
gl.Nf
gl.Nf@ind.names
sample_metadata.Nf[gl.Nf@ind.names, "state"]
#set dat
gl.Nf@pop = as.factor(sample_metadata.Nf[gl.Nf@ind.names, "state"]) #need to set pop for the ibd test to work
gl.Nf@ploidy = rep(as.integer(1), nInd(gl))
gl.Nf
nInd(gl.Nf)
gl.Nf@ploidy = rep(as.integer(1), nInd(gl.Nf))
gl.Nf
gl.Nf@pop
strata(gl.Nf) = as.factor(sample_metadata.Nf[gl.Nf@ind.names, "state"])
sample_metadata.Nf[gl.Nf@ind.names, ]
sample_metadata.Nf[gl.Nf@ind.names, "state"]
hier.Nf
rownames(hier.Nf) = hier.Nf$samp
rownames(hier.Nd) = hier.Nd$samp
pegas::amova(
dist.raw.Nf ~ site,
is.squared = F,
data = hier.Nf,
nperm = 0
)
strata(gl.Nf) = hier.Nf[gl.Nf@ind.names, ]
gl.Nf
poppr:poppr.amova(
x = gl.Nf
dist = dist.raw.Nf,
poppr:poppr.amova(
x = gl.Nf,
dist = dist.raw.Nf,
hier = ~site,
)
poppr:poppr.amova(
x = gl.Nf,
~site,
dist = dist.raw.Nf,
)
dist.raw.Nf
poppr:poppr.amova(
x = gl.Nf,
~site#,
#dist = dist.raw.Nf,
)
poppr:poppr.amova(
x = gl.Nf,
~site,
within=F#,
#dist = dist.raw.Nf,
)
hier.Nd
set.seed(12345)
amova.pegas.Nf = pegas::amova(
dist.raw.Nf ~ site,
is.squared = F,
data = hier.Nf,
nperm = 999 #set this to 999
)
amova.pegas.Nd = pegas::amova(
dist.raw.Nd ~ site,
is.squared = F,
data = hier.Nd,
nperm = 999 #set this to 999
)
amova.pegas.Nf
amova.pegas.Nd
0.1599030/0.5013703
?ade4::amova
summary(amova.pegas.Nd)
print(amova.pegas.Nd)
gl.Nf
amova.poppr.Nf = poppr:poppr.amova(
x = gl.Nf,
~site,
within=F#,
#dist = dist.raw.Nf,
)
data(humDNAm)
humDNAm
dist.raw.Nf
citation("adegenet")
?file.path
3*6*6
310.40-228.90
?write.csv
q(save="no")
library(adegenet)
# read SNP multi seq aligment fasta
dnaBin.Nf = adegenet::fasta2DNAbin(file = "data/Nf/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
dist.raw.Nf = ape::dist.dna(x = dnaBin.Nf, model = "raw", pairwise.deletion = T)
head(dist.raw.Nf * 997088)
saveRDS(dist.raw.Nf, "data/Nf/IBD/hamming_dist.rds")
rm(dnaBin.Nf)
gc()
dnaBin.Nd = adegenet::fasta2DNAbin(file = "data/Nd/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
# x nt
dist.raw.Nd = ape::dist.dna(x = dnaBin.Nd, model = "raw", pairwise.deletion = T)
saveRDS(dist.raw.Nd, "data/Nd/IBD/hamming_dist.rds")
rm(dnaBin.Nd)
gc()
##########################
##########################
#Then run invariants
dnaBin.Nf = adegenet::fasta2DNAbin(file = "data/Nf/final_tables/rm_dups/FINAL_invariant.snps_only.for_IBD.fasta")
dnaBin.Nf = adegenet::fasta2DNAbin(file = "data/Nf/final_tables/rm_dups/FINAL_invariant.snps_only.for_IBD.fasta")
?adegenet::fasta2DNAbin
#Nd
dnaBin.Nd = adegenet::fasta2DNAbin(file = "data/Nd/final_tables/rm_dups/FINAL_invariant.snps_only.for_IBD.fasta", chunkSize = 100)
dist.raw.Nd = ape::dist.dna(x = dnaBin.Nd, model = "raw", pairwise.deletion = T)
q(save="no")
