theme(
strip.background = element_blank(),
strip.placement = "outsdie",
strip.text = element_blank(),
plot.title = element_text(hjust = -0.125, vjust = -2)
) +
ggh4x::facetted_pos_scales(
y = list(
scale_y_continuous(breaks = seq(0.01,0.05,0.01)),
scale_y_continuous(breaks = seq(0.04,0.12,0.02)), #this is the only one we change from default
scale_y_continuous(breaks = seq(0.48,0.64,0.04))
)
)
p1
range01 <- function(x, ...){(x-min(x))/(max(x)-min(x))}
Nf_sliding_window.lt150 = Nf_sliding_window %>% filter(start_index < 100000)
Nf_sliding_window.lt150$scale_r2 = range01(Nf_sliding_window.lt150$mean_r2)
Nd_sliding_window.lt150 = Nd_sliding_window %>% filter(start_index < 100000)
Nd_sliding_window.lt150$scale_r2 = range01(Nd_sliding_window.lt150$mean_r2)
Nc_sliding_window = Nc_sliding_window[!is.na(Nc_sliding_window$mean_r2) & Nc_sliding_window$mean_r2 > 0.51,] # there are some NA vas at the long end...
Nc_sliding_window.lt150 = Nc_sliding_window %>% filter(start_index < 100000)
Nc_sliding_window.lt150$scale_r2 = range01(Nc_sliding_window.lt150$mean_r2)
all_slide.lt150 = rbind(Nf_sliding_window.lt150, Nd_sliding_window.lt150, Nc_sliding_window.lt150)
ks.test(x = Nf_sliding_window.lt150$scale_r2, y = Nd_sliding_window.lt150$scale_r2)
#D = 0.385, p-value < 2.2e-16
#alternative hypothesis: two-sided
ks.test(x = Nf_sliding_window.lt150$scale_r2, y = Nc_sliding_window.lt150$scale_r2)
#D = 0.17753, p-value = 1.762e-05
#alternative hypothesis: two-sided
ks.test(x = Nd_sliding_window.lt150$scale_r2, y = Nc_sliding_window.lt150$scale_r2)
p2 = ggplot(all_slide.lt150,
aes(
start_index/1000,
scale_r2,
color = factor(
spp,
levels = c("Nf", "Nd", "Nc"),
labels = c("N. faginata", "N. ditissima", "N. coccinea")
)
)
)+
geom_point(alpha = 0.2) +
#stat_smooth(method = "nls",
#        formula = y ~ a * exp(-S * x),
#        method.args = list(start = list(a = coef(mod0)[1], S = abs(coef(mod0)[2]))),
#        se = F
#) +
geom_smooth(method = loess, method.args = list(degree = 2, span = 0.4))  +
my_gg_theme.def_size +
scale_color_brewer(palette = "Set1") +
labs(x = "Pairwise SNP distance (Kbp)", y = "Scaled LD (range 0-1)", title = "b") +
theme(
legend.title = element_blank(),
legend.position = c(0.85, 0.85),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = -0.125, vjust = -2)
)
p2
pdf("figures/pop_gen/LD_decay/spp_comps.pdf", width = 12, height = 4.5)
grid.arrange(p1,p2,ncol=2)
dev.off()
p2 = ggplot(all_slide.lt150,
aes(
start_index/1000,
scale_r2,
color = factor(
spp,
levels = c("Nf", "Nd", "Nc"),
labels = c("N. faginata", "N. ditissima", "N. coccinea")
)
)
)+
geom_point(alpha = 0.2) +
#stat_smooth(method = "nls",
#        formula = y ~ a * exp(-S * x),
#        method.args = list(start = list(a = coef(mod0)[1], S = abs(coef(mod0)[2]))),
#        se = F
#) +
geom_smooth(method = loess, method.args = list(degree = 2, span = 0.4))  +
my_gg_theme.def_size +
scale_color_brewer(palette = "Set1") +
labs(x = "Pairwise SNP distance (Kbp)", y = "Scaled LD (range 0-1)", title = "b") +
theme(
legend.title = element_blank(),
legend.position = c(0.85, 0.85),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = -0.12, vjust = -2)
)
p2
pdf("figures/pop_gen/LD_decay/spp_comps.pdf", width = 12, height = 4.5)
grid.arrange(p1,p2,ncol=2)
dev.off()
p2 = ggplot(all_slide.lt150,
aes(
start_index/1000,
scale_r2,
color = factor(
spp,
levels = c("Nf", "Nd", "Nc"),
labels = c("N. faginata", "N. ditissima", "N. coccinea")
)
)
)+
geom_point(alpha = 0.2) +
#stat_smooth(method = "nls",
#        formula = y ~ a * exp(-S * x),
#        method.args = list(start = list(a = coef(mod0)[1], S = abs(coef(mod0)[2]))),
#        se = F
#) +
geom_smooth(method = loess, method.args = list(degree = 2, span = 0.4))  +
my_gg_theme.def_size +
scale_color_brewer(palette = "Set1") +
labs(x = "Pairwise SNP distance (Kbp)", y = "Scaled LD (range 0-1)", title = "b") +
theme(
legend.title = element_blank(),
legend.position = c(0.85, 0.85),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = -0.11, vjust = -2)
)
p2
pdf("figures/pop_gen/LD_decay/spp_comps.pdf", width = 12, height = 4.5)
grid.arrange(p1,p2,ncol=2)
dev.off()
q(save="no")
q(save="no")
library(dplyr)
library(ggplot2)
source("library/ggplot_theme.txt")
library(data.table)
library(RcppRoll)
library(gridExtra)
Nf.r_tab = fread("data/Nf/final_tables/rm_dups/FINAL_snp.1Mb_max.LD_decay_9999.ld.apos-bpos-r", header = F)
Nd.r_tab = fread("data/Nd/final_tables/rm_dups/FINAL_snp.1Mb_max.LD_decay_9999.ld.apos-bpos-r", header = F)
Nc.r_tab = fread("data/Nc/final_tables/FINAL_snp.1Mb_max.LD_decay_9999.ld.apos-bpos-r", header = F)
colnames(Nf.r_tab) = c("posA", "posB", "r2")
colnames(Nd.r_tab) = c("posA", "posB", "r2")
colnames(Nc.r_tab) = c("posA", "posB", "r2")
head(Nf.r_tab)
Nf.r_tab$dist = abs(Nf.r_tab$posA - Nf.r_tab$posB)
Nd.r_tab$dist = abs(Nd.r_tab$posA - Nd.r_tab$posB)
Nc.r_tab$dist = abs(Nc.r_tab$posA - Nc.r_tab$posB)
Nf.r_tab$spp = "Nf"
Nd.r_tab$spp = "Nd"
Nc.r_tab$spp = "Nc"
head(Nf.r_tab)
all.R_tab = rbind(Nf.r_tab, Nd.r_tab, Nc.r_tab)
gc()
#all vals plot (it's an obnoxiously big file)
p1 = ggplot(all.R_tab, aes(x = dist/1000, y = r2)) +
geom_point(alpha = 0.1) +
geom_smooth() +
facet_wrap(~spp, ncol = 3) +
#scale_x_continuous(limits = c(NA, 100)) +
labs(x = "Distance (Kb)", y = expression(paste("r"^2))) +
my_gg_theme
pdf("figures/pop_gen/LD_decay/all_spp.pdf", width = 20, height = 10)
p1
Nf.r_tab.sorted = Nf.r_tab[order(Nf.r_tab$dist, decreasing = F),c("r2","dist")]
r2_roll = roll_mean(x = Nf.r_tab.sorted$r2, n = 1000, by = 500)
dist_roll = roll_mean(x = Nf.r_tab.sorted$dist, n = 1000, by = 500)
plot(r2_roll ~ dist_roll)
length(r2_roll)
LD_sliding_window_mean = function(r2,dist_bp,window_size,slide){
r2.sort = r2[order(dist_bp, decreasing = F)]
dist.sort = dist_bp[order(dist_bp, decreasing = F)]
i = 1 #initialize start & stop
i2 = window_size
mean_list = list()
while(i <= (dist.sort[length(dist.sort)] - window_size) + 1){
mean_list[[i]] = data.frame(
mean_r2 = mean(r2.sort[dist.sort >= i & dist.sort <= i2], na.rm = T),
quant90 = quantile( x = r2.sort[dist.sort >= i & dist.sort <= i2], probs = 0.9, na.rm = T),
start_index = i,
stop_index = i2
)
i = i+slide
i2 = i2+slide
}
return(dplyr::bind_rows(mean_list))
}
Nf_sliding_window = LD_sliding_window_mean(Nf.r_tab.sorted$r2, Nf.r_tab.sorted$dist, 1000, 250)
Nd_sliding_window = LD_sliding_window_mean(Nd.r_tab$r2, Nd.r_tab$dist, 1000, 250)
Nc_sliding_window = LD_sliding_window_mean(Nc.r_tab$r2, Nc.r_tab$dist, 1000, 250)
plot(Nf_sliding_window$mean_r2 ~ Nf_sliding_window$start_index)
plot(Nd_sliding_window$mean_r2 ~ Nd_sliding_window$start_index)
plot(Nc_sliding_window$mean_r2 ~ Nc_sliding_window$start_index)
#the Nc values get highly variable past 300K (because that's the longest contig presumably
#let's cut everything off at that point
Nf_sliding_window$spp = "Nf"
Nd_sliding_window$spp = "Nd"
Nc_sliding_window$spp = "Nc"
all_slide = rbind(Nf_sliding_window, Nd_sliding_window, Nc_sliding_window)
p1 = ggplot(all_slide %>% filter(start_index < 100000), aes(start_index/1000, mean_r2)) +
geom_point(alpha = 0.5) +
facet_wrap(
~factor(
spp,
levels = c("Nf", "Nd", "Nc"),
labels = c("N. faginata", "N. ditissima", "N. coccinea")
),
ncol = 1,
scales = "free_y",
strip.position = "right"
) +
geom_text(
data = data.frame(
spp = c("Nf", "Nd", "Nc"),
lab = c("N. faginata", "N. ditissima", "N. coccinea"),
x = rep(95,3),
y = c(0.045,0.115, 0.625)
),
aes(x = x, y = y, label = lab)
) +
my_gg_theme.def_size +
labs(x = "Pairwise SNP distance (Kbp)", y = expression(paste("Linkage disequilibrium (r"^2, ")")), title = "a") +
theme(
strip.background = element_blank(),
strip.placement = "outsdie",
strip.text = element_blank(),
plot.title = element_text(hjust = -0.125, vjust = -2)
) +
ggh4x::facetted_pos_scales(
y = list(
scale_y_continuous(breaks = seq(0.01,0.05,0.01)),
scale_y_continuous(breaks = seq(0.04,0.12,0.02)), #this is the only one we change from default
scale_y_continuous(breaks = seq(0.48,0.64,0.04))
)
)
p1
range01 <- function(x, ...){(x-min(x))/(max(x)-min(x))}
Nf_sliding_window.lt150 = Nf_sliding_window %>% filter(start_index < 100000)
Nf_sliding_window.lt150$scale_r2 = range01(Nf_sliding_window.lt150$mean_r2)
Nd_sliding_window.lt150 = Nd_sliding_window %>% filter(start_index < 100000)
Nd_sliding_window.lt150$scale_r2 = range01(Nd_sliding_window.lt150$mean_r2)
Nc_sliding_window = Nc_sliding_window[!is.na(Nc_sliding_window$mean_r2) & Nc_sliding_window$mean_r2 > 0.51,] # there are some NA vas at the long end...
Nc_sliding_window.lt150 = Nc_sliding_window %>% filter(start_index < 100000)
Nc_sliding_window.lt150$scale_r2 = range01(Nc_sliding_window.lt150$mean_r2)
all_slide.lt150 = rbind(Nf_sliding_window.lt150, Nd_sliding_window.lt150, Nc_sliding_window.lt150)
p2 = ggplot(all_slide.lt150,
aes(
start_index/1000,
scale_r2,
color = factor(
spp,
levels = c("Nf", "Nd", "Nc"),
labels = c("N. faginata", "N. ditissima", "N. coccinea")
)
)
)+
geom_point(alpha = 0.2) +
#stat_smooth(method = "nls",
#        formula = y ~ a * exp(-S * x),
#        method.args = list(start = list(a = coef(mod0)[1], S = abs(coef(mod0)[2]))),
#        se = F
#) +
geom_smooth(method = loess, method.args = list(degree = 2, span = 0.4))  +
my_gg_theme.def_size +
scale_color_brewer(palette = "Set1") +
labs(x = "Pairwise SNP distance (Kbp)", y = "Scaled LD (range 0-1)", title = "b") +
theme(
legend.title = element_blank(),
legend.position = c(0.85, 0.85),
legend.text = element_text(size = 10),
plot.title = element_text(hjust = -0.11, vjust = -2)
)
p2
p2
png("figures/pop_gen/LD_decay/spp_comps.png", width = 12, height = 4.5, units = "inches")
png("figures/pop_gen/LD_decay/spp_comps.png", width = 12, height = 4.5, units = "in")
grid.arrange(p1,p2,ncol=2)
dev.off()
?png
png("figures/pop_gen/LD_decay/spp_comps.png", width = 12, height = 4.5, units = "in", res = 300)
grid.arrange(p1,p2,ncol=2)
dev.off()
q(save="no")
library(vegan)
library(geosphere)
source("library/ggplot_theme.txt")
library(dplyr)
library(ggplot2)
library(gridExtra)
library(vegan)
library(geosphere)
source("library/ggplot_theme.txt")
dist.Nf = read.table("data/Nf/final_tables/rm_dups/FINAL_invariant.IBD_analyses.dist", header = F)
dist.ID.Nf = read.table("data/Nf/final_tables/rm_dups/FINAL_invariant.IBD_analyses.dist.id", header = F)
rownames(dist.Nf) = dist.ID.Nf[,1]
colnames(dist.Nf) = dist.ID.Nf[,2]
dist.Nf = dist.Nf %>% as.dist()
dist.Nf
dist.Nd = read.table("data/Nd/final_tables/rm_dups/FINAL_invariant.IBD_analyses.dist", header = F)
dist.ID.Nd = read.table("data/Nd/final_tables/rm_dups/FINAL_invariant.IBD_analyses.dist.id", header = F)
rownames(dist.Nd) = dist.ID.Nd[,1]
colnames(dist.Nd) = dist.ID.Nd[,2]
dist.Nd = dist.Nd %>% as.dist()
head(dist.Nd)
dist.Nc = read.table("data/Nc/final_tables/FINAL_invariant.IBD_analyses.dist", header = F)
dist.ID.Nc = read.table("data/Nc/final_tables/FINAL_invariant.IBD_analyses.dist.id", header = F)
rownames(dist.Nc) = dist.ID.Nc[,1]
colnames(dist.Nc) = dist.ID.Nc[,2]
dist.Nc = dist.Nc %>% as.dist()
head(dist.Nc)
#convert to nt difs per kb
dist.Nf = dist.Nf / (41018940 / 1000)
dist.Nd = dist.Nd / (38535154 / 1000)
dist.Nc = dist.Nc / (40630626 / 1000)
#get order of samples
dist.order.Nf = as.matrix(dist.Nf ) %>% rownames
dist.order.Nd = as.matrix(dist.Nd ) %>% rownames
dist.order.Nc = as.matrix(dist.Nc ) %>% rownames
length(dist.order.Nf)
length(dist.order.Nd)
length(dist.order.Nc)
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nd_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nc = read.csv("data/sample_metadata/Nc_canton_loc_date.lat_lon.csv")
nrow(sample_metadata.Nf)
nrow(sample_metadata.Nd)
nrow(sample_metadata.Nc)
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
rownames(sample_metadata.Nc) = sample_metadata.Nc$Sequence_label
#lat lon tables (ordered)
coords.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
collection_period = sample_metadata.Nf[dist.order.Nf, "collection_period"],
lat = sample_metadata.Nf[dist.order.Nf, "lat"],
lon = sample_metadata.Nf[dist.order.Nf, "lon"],
stringsAsFactors = T
)
rownames(coords.Nf) = coords.Nf$samp
coords.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
collection_period = sample_metadata.Nd[dist.order.Nd, "collection_period"],
lat = sample_metadata.Nd[dist.order.Nd, "lat"],
lon = sample_metadata.Nd[dist.order.Nd, "lon"],
stringsAsFactors = T
)
rownames(coords.Nd) = coords.Nd$samp
coords.Nc = data.frame(
samp = sample_metadata.Nc[dist.order.Nc, "Sequence_label"],
collection_period = rep("modern", nrow(sample_metadata.Nc)),
lat = sample_metadata.Nc[dist.order.Nc, "lat"],
lon = sample_metadata.Nc[dist.order.Nc, "lon"],
stringsAsFactors = T
)
rownames(coords.Nc) = coords.Nc$samp
#For now we only want to compare isolates collected in the modern era
# We may use the older isolates for a different test
coords.Nf$lat[coords.Nf$collection_period == "early"] = NA
coords.Nf$lon[coords.Nf$collection_period == "early"] = NA
coords.Nd$lat[coords.Nd$collection_period == "early"] = NA
coords.Nd$lon[coords.Nd$collection_period == "early"] = NA
#calculate geographic distance
Nf.Dgeo <- distm(x = coords.Nf[,c("lon", "lat")], fun = distVincentyEllipsoid)
Nd.Dgeo <- distm(x = coords.Nd[,c("lon", "lat")], fun = distVincentyEllipsoid)
Nc.Dgeo <- distm(x = coords.Nc[,c("lon", "lat")], fun = distVincentyEllipsoid)
rownames(Nf.Dgeo) = coords.Nf$samp
colnames(Nf.Dgeo) = coords.Nf$samp
Nf.Dgeo = as.dist(Nf.Dgeo/1000)
rownames(Nd.Dgeo) = coords.Nd$samp
colnames(Nd.Dgeo) = coords.Nd$samp
Nd.Dgeo = as.dist(Nd.Dgeo/1000)
rownames(Nc.Dgeo) = coords.Nc$samp
colnames(Nc.Dgeo) = coords.Nc$samp
Nc.Dgeo = as.dist(Nc.Dgeo/1000)
#set zero dists to NA (within site comps)
sum(Nf.Dgeo == 0, na.rm = T)
Nf.Dgeo[Nf.Dgeo == 0] = NA
sum(Nd.Dgeo == 0, na.rm = T)
Nd.Dgeo[Nd.Dgeo == 0] = NA
sum(Nc.Dgeo == 0, na.rm = T)
Nc.Dgeo[Nc.Dgeo == 0] = NA
# match NAs in gen dists
dist.Nf[is.na(Nf.Dgeo)] = NA
dist.Nd[is.na(Nd.Dgeo)] = NA
dist.Nc[is.na(Nc.Dgeo)] = NA
mantel(dist.Nf, Nf.Dgeo, na.rm = T)
#Mantel statistic r: 0.2465
#Significance: 0.001
mantel(dist.Nd, Nd.Dgeo, na.rm = T)
#Mantel statistic r: -0.08981
#Significance: 0.782
mantel(dist.Nc, Nc.Dgeo, na.rm = T)
#Mantel statistic r: 0.7574
#Significance: 0.05 # restricted set of permutation
mantel(dist.Nf, log(Nf.Dgeo), na.rm = T)
#Mantel statistic r: 0.2307
#Significance: 0.001
mantel(dist.Nd, log(Nd.Dgeo), na.rm = T)
#Mantel statistic r: -0.05315
#Significance: 0.675
mantel(dist.Nc, log(Nc.Dgeo), na.rm = T)
#Mantel statistic r: 0.7849
#Significance: 0.05
#rm VA from Nf and rerun
VA_samps = sample_metadata.Nf %>% filter(state == "VA") %>% pull(Sequence_label)
dist.Nf.no_VA = as.matrix(dist.Nf)
dist.Nf.no_VA[rownames(as.matrix(dist.Nf)) %in% VA_samps, ] = NA
dist.Nf.no_VA[,colnames(as.matrix(dist.Nf)) %in% VA_samps] = NA
Nf.Dgeo.no_VA = as.matrix(Nf.Dgeo)
Nf.Dgeo.no_VA[is.na(dist.Nf.no_VA)] = NA
dist.Nf.no_VA = as.dist(dist.Nf.no_VA)
Nf.Dgeo.no_VA = as.dist(Nf.Dgeo.no_VA)
mantel(dist.Nf.no_VA, Nf.Dgeo.no_VA, na.rm = T)
#########################
#long format for plotting
Nf.Dgeo.long = reshape2::melt(Nf.Dgeo %>% as.matrix)
Nf.Dgeo.long %>% filter(Var1 == "NG2" & Var2 == "NG1") %>% nrow
Nd.Dgeo.long = reshape2::melt(Nd.Dgeo %>% as.matrix)
Nc.Dgeo.long = reshape2::melt(Nc.Dgeo %>% as.matrix)
#Need to set self comps to NA (zero dists, i.e., same site, have been removed already..)
Nf.Dgeo.long[Nf.Dgeo.long$Var1 == Nf.Dgeo.long$Var2, "value"] = NA
Nd.Dgeo.long[Nd.Dgeo.long$Var1 == Nd.Dgeo.long$Var2, "value"] = NA
Nc.Dgeo.long[Nc.Dgeo.long$Var1 == Nc.Dgeo.long$Var2, "value"] = NA
#set gen dists to NA where geo dist == NA
Nf.Dgen.long = reshape2::melt(dist.Nf %>% as.matrix)
Nd.Dgen.long = reshape2::melt(dist.Nd %>% as.matrix)
Nc.Dgen.long = reshape2::melt(dist.Nc %>% as.matrix)
Nf.Dgen.long[is.na(Nf.Dgeo.long$value), "value"] = NA
Nd.Dgen.long[is.na(Nd.Dgeo.long$value), "value"] = NA
Nc.Dgen.long[is.na(Nc.Dgeo.long$value), "value"] = NA
colnames(Nf.Dgeo.long)[3] = "km"
colnames(Nf.Dgen.long)[3] = "SNPsPerKb"
colnames(Nd.Dgeo.long)[3] = "km"
colnames(Nd.Dgen.long)[3] = "SNPsPerKb"
colnames(Nc.Dgeo.long)[3] = "km"
colnames(Nc.Dgen.long)[3] = "SNPsPerKb"
Nf.long = full_join(Nf.Dgeo.long, Nf.Dgen.long)
nrow(Nf.long)
nrow(Nf.Dgeo.long)
nrow(Nf.Dgen.long)
Nd.long = full_join(Nd.Dgeo.long, Nd.Dgen.long)
Nc.long = full_join(Nc.Dgeo.long, Nc.Dgen.long)
######################
#plot
#
p1 = ggplot(Nf.long, aes(x = km, y = SNPsPerKb)) +
geom_point(alpha = 0.08, shape = 1) +
geom_smooth(method = "lm", linetype = 1, color = "white", linewidth = 2) +
geom_smooth(method = "lm", linetype = 1, color = "black") +
scale_y_continuous(breaks = c(3,4,5)) +
labs(x = "Geographic distance (km)", y = "Hamming distance (SNPs per Kb)", title = "a") +
annotate(
geom = "text",
label = expression(paste("Mantel r = 0.25, ", italic("P"), " = 0.001")),
x = 1475,
y = 2.5
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.10)
)
p1
p2 = ggplot(Nd.long, aes(x = km, y = SNPsPerKb)) +
geom_point(alpha = 0.25, shape = 1) +
geom_smooth(method = "lm", linetype = 2, color = "black") +
labs(x = "Geographic distance (km)", y = "Hamming distance (SNPs per Kb)", title = "b") +
scale_y_continuous(breaks = c(1,4,7,10)) +
annotate(
geom = "text",
label = expression(paste("Mantel r = -0.09, ", italic("P"), " = 0.79")),
x = 1600,
y = 0.75
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.06),
axis.title.y = element_blank()
)
p3 = ggplot(Nc.long, aes(x = km, y = SNPsPerKb)) +
geom_point(alpha = 0.25, shape = 1) +
geom_smooth(method = "lm", linetype = 2, color = "black") +
labs(x = "Geographic distance (km)", y = "Hamming distance (SNPs per Kb)", title = "c") +
annotate(
geom = "text",
label = expression(paste("Mantel r = 0.75, ", italic("P"), " = 0.05")),
x = 170,
y = 12.5
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.12, margin = margin(b = -10))
)
p2 = ggplot(Nd.long, aes(x = km, y = SNPsPerKb)) +
geom_point(alpha = 0.25, shape = 1) +
geom_smooth(method = "lm", linetype = 2, color = "black") +
labs(x = "Geographic distance (km)", y = "Hamming distance (SNPs per Kb)", title = "b") +
scale_y_continuous(breaks = c(1,4,7,10)) +
annotate(
geom = "text",
label = expression(paste("Mantel r = -0.09, ", italic("P"), " = 0.79")),
x = 1600,
y = 0.75
) +
my_gg_theme.def_size +
theme(
plot.title = element_text(hjust = -0.06),
axis.title.y = element_blank()
)
png("figures/pop_gen/IBD/IBD.pdf", width = 10, height = 3.5, units = "in", res = 300)
grid.arrange(p1,p2,ncol = 2)
dev.off()
pdf("figures/pop_gen/IBD/IBD.pdf", width = 10, height = 3.5)
grid.arrange(p1,p2,ncol = 2)
dev.off()
png("figures/pop_gen/IBD/IBD.png", width = 10, height = 3.5, units = "in", res = 300)
grid.arrange(p1,p2,ncol = 2)
dev.off()
q(save="no")
