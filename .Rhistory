mean(locus_dp_mean.libTwo)-(2*sd(locus_dp_mean.libTwo))
mean(locus_dp_mean.libThree)-(2*sd(locus_dp_mean.libThree))
mean(locus_dp_mean.libFour)-(2*sd(locus_dp_mean.libFour))
mean(locus_dp_mean.libFive)-(2*sd(locus_dp_mean.libFive))
locus_dp_mean.libOne
dp.long
ind_stats
locus_dp_mean
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100))
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)")
range(locus_dp_mean.libOne)
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100))
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100))
scale_y_continuous(limits = c(0,200)
)
ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,200))
p1 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p1
p1 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))) +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p1
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p2
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) #+
#scale_y_continuous(limits = c(0,150))
p2
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p2
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,100))
p2
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,50), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p3
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,1500))
p3
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 50 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,250))
p3
p2 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libTwo),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libTwo)+(2*sd(locus_dp_mean.libTwo))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,100))
p2
p3 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libThree),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libThree)+(2*sd(locus_dp_mean.libThree))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,250))
p3
p4 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p4
p1 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libOne),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libOne)+(2*sd(locus_dp_mean.libOne))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p1
p4 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libFour),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libFour)+(2*sd(locus_dp_mean.libFour))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p4
p5 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libFive),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libFive)+(2*sd(locus_dp_mean.libFive))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) +
scale_y_continuous(limits = c(0,150))
p5
#the Neco library distribution is disjunct. Filter out samples that are below 5 before calcs
mean(locus_dp_mean.libFive[locus_dp_mean.libFive > 5])
p5 = ggplot(
data.frame(locus_dp_mean = locus_dp_mean.libFive),
aes(x = locus_dp_mean)
) +
geom_bar() +
theme_classic() +
labs(x = "Locus mean DP\n(values of above 100 excluded)") +
geom_vline(xintercept = mean(locus_dp_mean.libFive)+(2*sd(locus_dp_mean.libFive))) +
scale_x_continuous(limits = c(0,100), breaks = c(seq(0,50,5),75,100)) #+
#    scale_y_continuous(limits = c(0,150))
p5
mean(locus_dp_mean.libFive)
pdf("figures/quality_filtering/core_fugr/library_DP_dist.pdf", width = 6, height = 6)
p1
p2
p3
p4
p5
dev.off()
52384-16257
16257/52384
library(ggplot2)
library(gridExtra)
lmiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.imiss", header = T)
head(lmiss)
head(imiss)
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5.5e+05))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 3e+05, label = "25%") +
labs(title = "Before filtering for missingness")
p1
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p2 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,30), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60)) +
labs(title = "")
p2
52383 * 99
895458-741498
153960/5185917
895458/5185917
p1
52384-9843
9843/52384
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5.5e+05))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 3e+05, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5.5e+05))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,6000))  +
annotate(geom = "text", x = (0.25*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.25*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,6000))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.5*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,6000))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 6000, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.5*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5500))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 5500, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p2 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,30), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60)) +
labs(title = "")
p2
lmiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.imiss", header = T)
p3 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)") +
expand_limits(x = c(0,100), y = c(0,5500))  +
labs(title = "After locus 50% filter")
p3
p4 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,30), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60))
p4
pdf("figures/quality_filtering/core_fugr/core_fugr.lmiss_imiss_distribution.locus_hard_filter.pdf", height = 4, width = 8)
grid.arrange(p1,p2,p3,p4, ncol = 2, widths = c(0.5,0.5))
dev.off()
lmiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/INFOfilters.removed.DPGQ_filter.imiss", header = T)
head(lmiss)
head(imiss)
p1 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)")
p1
p1 = p1 +
geom_vline(xintercept = 0.5*100, color = "red") +
expand_limits(x = c(0,100), y = c(0,5500))  +
annotate(geom = "text", x = (0.5*100)+1, hjust = 0, y = 5500, label = "50%") +
labs(title = "Before filtering for missingness")
p1
p2 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,60), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60)) +
labs(title = "")
p2
###########################################
#First pass -- after remove top 5% loci -- Import new tables and rerun above
lmiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.lmiss", header = T)
imiss = read.table("data/Fugr1_ref/NA_filter.loc_gt_0.50.imiss", header = T)
p3 = ggplot(lmiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing individuals per locus (%)", y = "count (SNP)") +
expand_limits(x = c(0,100), y = c(0,5500))  +
labs(title = "After locus 50% filter")
p3
p4 = ggplot(imiss, aes(x = F_MISS*100)) +
geom_histogram(bins = 50) +
theme_classic() +
labs(x = "Missing loci per indidual (%)", y = "count (indv)", title = "") +
expand_limits(x = c(0,60), y = c(0,30))  +
scale_x_continuous(breaks = c(0,15,30,45,60))
p4
pdf("figures/quality_filtering/core_fugr/core_fugr.lmiss_imiss_distribution.locus_hard_filter.pdf", height = 4, width = 8)
grid.arrange(p1,p2,p3,p4, ncol = 2, widths = c(0.5,0.5))
dev.off()
q(save="no")
q(save="no")
q(save="no")
#initialize tree with NJ (using original DNAbinobject, not phangorn format)
#
dist_mat = dist.dna(seqs, pairwise.deletion = T, model="paralin") #must use pairwise deletion because of high number of Ns
require(adegenet)
require(ape)
require(phangorn)
# read SNP multi seq aligment fasta
seqs = fasta2DNAbin(file = "data/Fugr1_ref/core.Fusgr1-neonectria.snps_plus_invariant_aln.fasta")
# https://adegenet.r-forge.r-project.org/files/PRstats/practical-introphylo.1.0.pdf
# convert to phangorn format
seqs.phyDat = as.phyDat(seqs)
#initialize tree with NJ (using original DNAbinobject, not phangorn format)
#
dist_mat = dist.dna(seqs, pairwise.deletion = T, model="paralin") #must use pairwise deletion because of high number of Ns
#K81 gives about a third of the NAs (2746)
##logdet gives only 122 NAs compared to 6849 for moat others
sum(is.na(dist_mat) )
#initialize tree with NJ (using original DNAbinobject, not phangorn format)
#
dist_mat = dist.dna(seqs, pairwise.deletion = T, model="logdet") #must use pairwise deletion because of high number of Ns
tre.ini = njs(dist_mat)
plot(tre.ini)
# the TN93 model is giving NAs. The docs say that most evolutionary distances are
# undefined with a lot of difs (e.g., above 0.75). We return values up to 0.825
# with the raw proportion.
#
tre = bionj(dist_mat)
# the TN93 model is giving NAs. The docs say that most evolutionary distances are
# undefined with a lot of difs (e.g., above 0.75). We return values up to 0.825
# with the raw proportion.
#
tre = bionjs(dist_mat)
plot(tre)
plot(tre, type = "unrooted", show.tip = F)
#Read metadata
#
sample_metadata = read.csv("data/sample_metadata/shared_buscos.lat_lon_dur_inf.csv")
colnames(sample_metadata)
#Read metadata
#
sample_metadata = read.csv("data/sample_metadata/core_fugr.lat_lon_dur_inf.csv")
colnames(sample_metadata)
colnames(sample_metadata)[1] = "label" #for join below
annot = left_join(data.frame(label = labels(tre)), sample_metadata)
library(dplyr)
#Read metadata
#
sample_metadata = read.csv("data/sample_metadata/core_fugr.lat_lon_dur_inf.csv")
colnames(sample_metadata)
colnames(sample_metadata)[1] = "label" #for join below
annot = left_join(data.frame(label = labels(tre)), sample_metadata)
annot$color = vector(mode = "character", length = nrow(dend.labels.new))
annot$color = vector(mode = "character", length = nrow(annot))
annot[annot$spp == "Nf", "color"] = "blue"
annot
plot(tre, type = "unrooted", show.tip = F)
labels(tre))
labels(tre)
#initialize tree with NJ (using original DNAbinobject, not phangorn format)
#
dist_mat = dist.dna(seqs, pairwise.deletion = T, model="raw") #must use pairwise deletion because of high number of Ns
# the TN93 model is giving NAs. The docs say that most evolutionary distances are
# undefined with a lot of difs (e.g., above 0.75). We return values up to 0.825
# with the raw proportion.
#
tre = bionj(dist_mat)
plot(tre)
plot(tre, type = "unrooted", show.tip = F)
#Read metadata
#
sample_metadata = read.csv("data/sample_metadata/core_fugr.lat_lon_dur_inf.csv")
colnames(sample_metadata)
colnames(sample_metadata)[1] = "label" #for join below
annot = left_join(data.frame(label = labels(tre)), sample_metadata)
annot$color = vector(mode = "character", length = nrow(annot))
annot[annot$spp == "Nf", "color"] = "blue"
annot[annot$spp == "Nc", "color"] = "red"
labels(tre)
tre
str(tre)
annot = left_join(data.frame(label = tre$tip.label), sample_metadata)
annot$color = vector(mode = "character", length = nrow(annot))
annot[annot$spp == "Nf", "color"] = "blue"
annot[annot$spp == "Nc", "color"] = "red"
annot[annot$spp == "Nd", "color"] = "green"
annot[annot$spp == "Fg", "color"] = "yellow"
####################################
plot(tre, type = "unrooted", show.tip = F)
tiplabels(annot$spp, bg=annot$color,
cex=.5)
#root on Neco
tre2 = root(tre, out = 143)
tre[1]
#root on Neco
tre2 = root(tre, out = 1)
tre2 = ladderize(tre2)
plot(tre2, , show.tip = F)
tiplabels(annot$spp, bg=annot$color,
cex=.5)
q(save="no")
