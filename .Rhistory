?str_extract
?egrep
?regexpr
tig_names
dist_files
tig_names = sort(read.table("data/Nf/IBD/invariant/adegenet.tigs_names.txt", header = F))
tig_names
dist_list
dist_files
tig_lens
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
dist_path = "data/Nf/IBD/invariant"
tig_lens = read.table("data/Nf/IBD/invariant/adegenet.tigs_lens.txt", header = F)
tig_names = read.table("data/Nf/IBD/invariant/adegenet.tigs_names.txt", header = F)
dist_files = list.files(path = dist_path, pattern = "raw.rds", full.names = F)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
dist_list
?lapply
sum(dist_list)
dist_list[["tig00000001_pilon"]]
head(dist_list[["tig00000001_pilon"]])
dist_list[[1]]
head(dist_list[[1]])
head(dist_list[["tig00000001_pilon"]])
sum_dist = dist_list[[1]]
for( i in 2:length(dist_list)){
sum_dist = sum_dist + dist_list[[i]]
}
head(sum_dist)
saveRDS(sum_dist, file.path(dist_path, "sum_tigs_len_corrected.rds"))
#########################################
#Nd, len norm distance
dist = readRDS("data/Nd/IBD/invariant/hamming_dist.invariant.rds")
len = read.table("data/Nd/IBD/invariant/len.txt")
len = read.table("data/Nd/IBD/invariant/len.txt")
len
dist_len = dist*len$V1
saveRDS(dist_len, "data/Nd/IBD/invariant/hamming_dist.len_corrected.rds")
head(dist_len)
head(sum_dist)
range(dist_len)
range(sum_dist)
head(sum_dist)
len
tig_lens
!is.na(sum_dist)
sum_dist = dist_list[[1]]
for( i in 2:length(dist_list)){
sum_dist = sum_dist + dist_list[[i]]
}
head(sum_dist)
saveRDS(sum_dist, file.path(dist_path, "sum_tigs_len_corrected.rds"))
range(sum_dist[!is.na(sum_dist)])
range(dist_len)
range(dist_list[[1]])
range(dist)
dist_files = list.files(path = dist_path, pattern = "len_corrected.rds", full.names = F)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
sum_dist = dist_list[[1]]
head(sum_dist)
range(dist_list[[1]])
dist_len
saveRDS(dist_len, "data/Nd/IBD/invariant/hamming_dist.len_corrected.rds")
range(dist_len)
#########################################
#Nc, len norm distance
dist = readRDS("data/Nc/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nc/IBD/invariant/len.txt")
len
dist_len = dist*len$V1
saveRDS(dist_len, "data/Nc/IBD/invariant/hamming_dist.len_corrected.rds")
range(dist_len)
#########################################
#Nd, len norm distance
dist = readRDS("data/Nd/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nd/IBD/invariant/len.txt")
len
38317560/38317.560
dist_len = dist*(len$V1/1000) #per kilobase
saveRDS(dist_len, "data/Nd/IBD/invariant/hamming_dist.len_corrected.rds")
range(dist_len)
#########################################
#Nc, len norm distance
dist = readRDS("data/Nc/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nc/IBD/invariant/len.txt")
len
dist_len = dist*(len$V1/1000)
saveRDS(dist_len, "data/Nc/IBD/invariant/hamming_dist.len_corrected.rds")
range(dist_len)
#########################################
#Nf, len norm distances and sum over tigs
dist_path = "data/Nf/IBD/invariant"
tig_lens = read.table("data/Nf/IBD/invariant/adegenet.tigs_lens.txt", header = F)
tig_names = read.table("data/Nf/IBD/invariant/adegenet.tigs_names.txt", header = F)
dist_files = list.files(path = dist_path, pattern = "len_corrected.rds", full.names = F)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
dist_files = list.files(path = dist_path, pattern = "raw.rds", full.names = F)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
range(dist_list[[1]])
dist_files[i]
range(dist_list[[2]])
dist_list[[2]]
range(dist_list[[2]])
head(dist_list[[2]])
#########################################
#Nf, len norm distances and sum over tigs
test_dist = readRDS("data/Nf/IBD/test_tig00000001_pilon_raw.rds")
range(test_dist)
dist_path = "data/Nf/IBD/invariant"
tig_lens = read.table("data/Nf/IBD/invariant/adegenet.tigs_lens.txt", header = F)
tig_names = read.table("data/Nf/IBD/invariant/adegenet.tigs_names.txt", header = F)
dist_files = list.files(path = dist_path, pattern = "raw.rds", full.names = F)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
range(dist_list[[2]])
range(dist_list[[1]])
2.278725e-01
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
range(dist_list[[1]])
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
range(dist_list[[1]])
range(test_dist)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
range(dist_list[[1]])
sum_dist = dist_list[[1]]
for( i in 2:length(dist_list)){
sum_dist = sum_dist + dist_list[[i]]
}
head(sum_dist)
sum_dist_kb = sum_dist/1000
range(sum_dist_kb)
range(sum_dist_kb[!is.na(sum_dist_kb)])
range(dist)
range(dist_len)
saveRDS(sum_dist, file.path(dist_path, "sum_tigs_len_corrected.rds"))
range(sum_dist_kb[!is.na(sum_dist_kb)])
#########################################
#Nd, len norm distance
dist = readRDS("data/Nd/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nd/IBD/invariant/len.txt")
len
dist_len = dist*(len$V1/1000) #per kilobase
saveRDS(dist_len, "data/Nd/IBD/invariant/hamming_dist.len_corrected.rds")
range(dist_len)
#########################################
#Nc, len norm distance
dist = readRDS("data/Nc/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nc/IBD/invariant/len.txt")
len
dist_len = dist*(len$V1/1000)
saveRDS(dist_len, "data/Nc/IBD/invariant/hamming_dist.len_corrected.rds")
range(dist_len)
range(sum_dist_kb[!is.na(sum_dist_kb)])
range(dist_list[[1]])
range(dist_list[[2]])
range(dist_list[[3]])
range(dist_list[[4]])
range(dist_list[[5]])
range(dist_list[[6]])
sum_dist_kb = sum_dist
range(sum_dist)
min(sum_dist)
head(sum_dist)
#########################################
#Nd, len norm distance
dist = readRDS("data/Nd/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nd/IBD/invariant/len.txt")
len
dist_len = dist*(len$V1) #per kilobase
range(dist_len)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
dist_list[[tig_names[i,1]]] = temp.dist
}
range(dist_list[[5]])
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
range(dist_list[[1]])
mean(dist_list[[1]])
as.matrix(dist_list[[1]])
as.matrix(dist_list[[1]]) > 10^6
sum(as.matrix(dist_list[[1]]) > 10^6)
sum(as.matrix(dist_list[[1]]) < 10^6)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(range(temp.dist) )
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(min(temp.dist) )
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
dist_list[["tig00007950_pilon"]]
dist_list[["tig00007950_pilon"]] %>% head
dist_list[["tig00007950_pilon"]] %>% as.matrix
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(mean(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(median(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(median(temp.dist) * tig_lens[i,1])/tig_lens[i,1])
#print(min(temp.dist) )
print(median(temp.dist) * tig_lens[i,1]/tig_lens[i,1])
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(median(temp.dist) * tig_lens[i,1]/tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
#Nc
dnaBin.Nc = adegenet::fasta2DNAbin(file = "data/Nc/final_tables/rm_dups/FINAL_snp.snps_only.for_phylogeny.fasta")
#Nc
dnaBin.Nc = adegenet::fasta2DNAbin(file = "data/Nc/final_tables/FINAL_snp.snps_only.for_phylogeny.fasta")
dist.raw.Nc = ape::dist.dna(x = dnaBin.Nc, model = "raw", pairwise.deletion = T)
saveRDS(dist.raw.Nc, "data/Nc/IBD/hamming_dist.rds")
rm(dnaBin.Nc)
gc()
dist.raw.Nc
#########################################
#Nd, len norm distance
dist = readRDS("data/Nd/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nd/IBD/invariant/len.txt")
len
dist_len = dist*(len$V1) #per kilobase
range(dist_len)
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1]/tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist #* tig_lens[i,1]
}
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
sum_dist = dist_list[[1]]
for( i in 2:length(dist_list)){
sum_dist = sum_dist + dist_list[[i]]
}
head(sum_dist)
range(dist_len)
dist_len = dist*(len$V1) #per kilobase
range(dist_len)
q(save="no")
library(adegenet)
library(dplyr)
library(ggplot2)
source("library/ggplot_theme.txt")
dist.raw.Nf = readRDS("data/Nf/IBD/hamming_dist.rds")
dist.raw.Nd = readRDS("data/Nd/IBD/hamming_dist.rds")
dist.raw.Nc = readRDS("data/Nc/IBD/hamming_dist.rds")
#get order of samples
dist.order.Nf = as.matrix(dist.raw.Nf ) %>% rownames
dist.order.Nd = as.matrix(dist.raw.Nd ) %>% rownames
dist.order.Nc = as.matrix(dist.raw.Nc ) %>% rownames
length(dist.order.Nf)
length(dist.order.Nd)
length(dist.order.Nc)
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nd_filtered.lat_lon_dur_inf.csv")
nrow(sample_metadata.Nf)
nrow(sample_metadata.Nd)
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
#lat lon tables (ordered)
coords.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
collection_period = sample_metadata.Nf[dist.order.Nf, "collection_period"],
lat = sample_metadata.Nf[dist.order.Nf, "lat"],
lon = sample_metadata.Nf[dist.order.Nf, "lon"],
stringsAsFactors = T
)
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nd_filtered.lat_lon_dur_inf.csv")
nrow(sample_metadata.Nf)
nrow(sample_metadata.Nd)
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
length(dist.order.Nf)
#lat lon tables (ordered)
coords.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
collection_period = sample_metadata.Nf[dist.order.Nf, "collection_period"],
lat = sample_metadata.Nf[dist.order.Nf, "lat"],
lon = sample_metadata.Nf[dist.order.Nf, "lon"],
stringsAsFactors = T
)
sample_metadata.Nf[dist.order.Nf, "Sequence_label"]
sample_metadata.Nf[dist.order.Nf, "collection_period"
]
sample_metadata.Nf %>% colnames
#metadata
sample_metadata.Nf = read.csv("data/sample_metadata/Nf_filtered.lat_lon_dur_inf.csv")
sample_metadata.Nd = read.csv("data/sample_metadata/Nd_filtered.lat_lon_dur_inf.csv")
nrow(sample_metadata.Nf)
nrow(sample_metadata.Nd)
rownames(sample_metadata.Nf) = sample_metadata.Nf$Sequence_label
rownames(sample_metadata.Nd) = sample_metadata.Nd$Sequence_label
#lat lon tables (ordered)
coords.Nf = data.frame(
samp = sample_metadata.Nf[dist.order.Nf, "Sequence_label"],
collection_period = sample_metadata.Nf[dist.order.Nf, "collection_period"],
lat = sample_metadata.Nf[dist.order.Nf, "lat"],
lon = sample_metadata.Nf[dist.order.Nf, "lon"],
stringsAsFactors = T
)
rownames(coords.Nf) = coords.Nf$samp
coords.Nd = data.frame(
samp = sample_metadata.Nd[dist.order.Nd, "Sequence_label"],
collection_period = sample_metadata.Nd[dist.order.Nd, "collection_period"],
lat = sample_metadata.Nd[dist.order.Nd, "lat"],
lon = sample_metadata.Nd[dist.order.Nd, "lon"],
stringsAsFactors = T
)
rownames(coords.Nd) = coords.Nd$samp
#For now we only want to compare isolates collected in the modern era
# We may use the older isolates for a different test
coords.Nf$lat[coords.Nf$collection_period == "early"] = NA
coords.Nf$lon[coords.Nf$collection_period == "early"] = NA
coords.Nd$lat[coords.Nd$collection_period == "early"] = NA
coords.Nd$lon[coords.Nd$collection_period == "early"] = NA
#calcualte geographic distance
Nf.Dgeo <- dist(dismo::Mercator(coords.Nf[,c("lon", "lat")]))
Nd.Dgeo <- dist(dismo::Mercator(coords.Nd[,c("lon", "lat")]))
#########################
#long format for plotting
Nf.Dgeo.long = reshape2::melt(Nf.Dgeo %>% as.matrix)
Nd.Dgeo.long = reshape2::melt(Nd.Dgeo %>% as.matrix)
#Need to set self comps to NA
Nf.Dgeo.long[Nf.Dgeo.long$Var1 == Nf.Dgeo.long$Var2, "value"] = NA
Nd.Dgeo.long[Nd.Dgeo.long$Var1 == Nd.Dgeo.long$Var2, "value"] = NA
#set gen dists to NA where geo dist == NA
Nf.Dgen.long = reshape2::melt(dist.raw.Nf %>% as.matrix)
Nd.Dgen.long = reshape2::melt(dist.raw.Nd %>% as.matrix)
Nf.Dgen.long[is.na(Nf.Dgeo.long$value), "value"] = NA
Nd.Dgen.long[is.na(Nd.Dgeo.long$value), "value"] = NA
#create within between cats
Nf.Dgen.long$comp = ifelse(Nf.Dgeo.long$value == 0, "within", "between")
Nd.Dgen.long$comp = ifelse(Nd.Dgeo.long$value == 0, "within", "between")
#convert distances to nucelotide difs (instead of proportional) and
# correct for genome size (see IBD.individuals.calculate_hamming for number comps)
Nf.Dgen.long$difsPerKb = Nf.Dgen.long$value * 999132 / 42948.211
Nd.Dgen.long$difsPerKb = Nd.Dgen.long$value * 1413869 / 44950.817
range(Nf.Dgen.long)
#convert distances to nucelotide difs (instead of proportional) and
# correct for genome size (see IBD.individuals.calculate_hamming for number comps)
Nf.Dgen.long$difsPerKb = Nf.Dgen.long$value * 999132 / 42948.211
Nd.Dgen.long$difsPerKb = Nd.Dgen.long$value * 1413869 / 44950.817
range(Nf.Dgen.long)
Nf.Dgen.long
?range
?base::range
range(Nd.Dgen.long$difsPerKb, na.rm = T)
range(Nf.Dgen.long$difsPerKb, na.rm = T)
#convert distances to nucelotide difs (instead of proportional) and
# correct for genome size (see IBD.individuals.calculate_hamming for number comps)
Nf.Dgen.long$difsPerKb = Nf.Dgen.long$value * 999132 #/ 42948.211
Nd.Dgen.long$difsPerKb = Nd.Dgen.long$value * 1413869 #/ 44950.817
range(Nf.Dgen.long$difsPerKb, na.rm = T)
range(Nd.Dgen.long$difsPerKb, na.rm = T)
#########################################
#Nf, len norm distances and sum over tigs
test_dist = readRDS("data/Nf/IBD/test_tig00000001_pilon_raw.rds")
range(test_dist)
dist_path = "data/Nf/IBD/invariant"
tig_lens = read.table("data/Nf/IBD/invariant/adegenet.tigs_lens.txt", header = F)
tig_names = read.table("data/Nf/IBD/invariant/adegenet.tigs_names.txt", header = F)
dist_files = list.files(path = dist_path, pattern = "raw.rds", full.names = F)
dist_list = list()
for( i in 1:length(dist_files)){
temp.dist = readRDS(file.path(dist_path, dist_files[i]))
print(tig_names[i,1])
print(tig_lens[i,1])
#print(min(temp.dist) )
print(min(temp.dist) * tig_lens[i,1])
dist_list[[tig_names[i,1]]] = temp.dist * tig_lens[i,1]
}
sum_dist = dist_list[[1]]
for( i in 2:length(dist_list)){
sum_dist = sum_dist + dist_list[[i]]
}
head(sum_dist)
range(sum_dist_kb[!is.na(sum_dist_kb)])
range(sum_dist[!is.na(sum_dist)])
#########################################
#Nd, len norm distance
dist = readRDS("data/Nd/IBD/invariant/hamming_dist.invariant.rds")
range(dist)
len = read.table("data/Nd/IBD/invariant/len.txt")
len
dist_len = dist*(len$V1) #per kilobase
range(dist_len)
q(save="no")
